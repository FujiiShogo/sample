var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.711,1,2.364]],["body/modules/AppModule.html",[0,1.803,1,4.198,2,1.285,3,1.803,4,2.073,5,2.073,6,3.439,7,0.024,8,3.166,9,3.439,10,2.274,11,1.508,12,1.508,13,0.17,14,0.17,15,0.226,16,2.44,17,2.999,18,0.484,19,0.764,20,2.073,21,3.127,22,1.652,23,2.44,24,0.677,25,2.073,26,1.832,27,3.679,28,4.933,29,1.285,30,2.44,31,2.44,32,2.44,33,2.44,34,2.44,35,2.073,36,2.44,37,2.44,38,2.44,39,2.44,40,3.086,41,2.44,42,2.44,43,2.44,44,1.508,45,2.44,46,3.679,47,2.44,48,2.44,49,2.073,50,2.44,51,2.44,52,3.679,53,3.679,54,1.476,55,2.44,56,2.44,57,0.319,58,3.679,59,2.44,60,2.44,61,1.832,62,2.44,63,2.44,64,2.44,65,2.073,66,2.44,67,2.44,68,2.44,69,2.44,70,2.44,71,1.022,72,2.44,73,1.388,74,2.44,75,2.44,76,2.073,77,2.44,78,2.44,79,2.44,80,2.44,81,2.44,82,2.44,83,2.44,84,3.679,85,2.44,86,2.44,87,2.44,88,2.44,89,2.44,90,2.44,91,2.44,92,2.44,93,1.832,94,1.938,95,2.44,96,2.44,97,2.44,98,2.44,99,2.44,100,2.44,101,2.44,102,2.44,103,2.44,104,2.44,105,1.652,106,2.44,107,2.073,108,1.652,109,2.491,110,3.679,111,2.44,112,2.44,113,2.44,114,2.44,115,2.44,116,2.44,117,2.073,118,2.44,119,2.44,120,1.652,121,2.44,122,0.17,123,0.096,124,0.012,125,0.012]],["title/interfaces/AuthenticatedRequest.html",[126,1.84,127,2.364]],["body/interfaces/AuthenticatedRequest.html",[7,0.023,13,0.325,14,0.325,15,0.287,18,0.448,57,0.404,122,0.325,124,0.019,125,0.019,126,2.453,127,3.887,128,3.153,129,3.958,130,3.958,131,2.625,132,6.224,133,0.325,134,1.327,135,2.362,136,3.184,137,3.958,138,3.153,139,2.282]],["title/modules/AuthzModule.html",[0,1.711,6,2.158]],["body/modules/AuthzModule.html",[0,2.644,2,2.223,3,2.644,6,4.096,7,0.023,10,3.335,11,2.607,12,2.607,13,0.294,14,0.294,15,0.26,17,2.856,18,0.506,19,1.322,20,3.585,22,2.856,120,3.653,122,0.294,123,0.166,124,0.018,125,0.018,140,3.585,141,3.585,142,4.096,143,4.219,144,5.396,145,2.856,146,3.585,147,3.585,148,4.219,149,4.219,150,4.219,151,4.219,152,3.168,153,3.168]],["title/classes/Comment.html",[123,0.137,154,1.711]],["body/classes/Comment.html",[7,0.024,13,0.272,14,0.272,15,0.24,18,0.4,24,1.082,57,0.528,122,0.272,123,0.153,124,0.017,125,0.017,133,0.272,134,1.185,154,2.511,155,0.958,156,3.312,157,2.806,158,1.914,159,2.692,160,3.017,161,1.083,162,2.291,163,2.89,164,0.817,165,3.897,166,3.469,167,3.897,168,3.897,169,3.897,170,3.469,171,3.312,172,3.469]],["title/entities/CommentEntity.html",[173,1.711,174,1.84]],["body/entities/CommentEntity.html",[7,0.024,13,0.234,14,0.234,15,0.206,18,0.414,57,0.552,73,1.906,93,3.475,122,0.234,123,0.132,124,0.015,125,0.015,133,0.234,134,1.07,157,2.598,158,1.564,159,2.127,160,2.793,161,1.036,162,2.26,164,0.806,173,2.268,174,2.793,175,2.847,176,3.59,177,0.721,178,3.981,179,3.35,180,2.86,181,2.847,182,3.933,183,3.35,184,3.933,185,3.35,186,2.941,187,2.847,188,3.133,189,3.35,190,4.628,191,3.35,192,3.35,193,3.933,194,3.35,195,3.933,196,3.933,197,2.847,198,2.847,199,2.847,200,1.433,201,3.35,202,1.641,203,2.847,204,1.013,205,2.07,206,2.847,207,2.847,208,3.35]],["title/classes/CommentInput.html",[123,0.137,209,2.364]],["body/classes/CommentInput.html",[7,0.023,13,0.304,14,0.304,15,0.269,18,0.431,24,1.213,57,0.479,122,0.304,123,0.217,124,0.018,125,0.018,133,0.304,134,1.275,155,1.074,157,2.962,160,3.185,161,1.06,162,2.077,163,2.904,164,0.741,209,3.734,210,3.711,211,3.711,212,4.367,213,4.367,214,4.687,215,4.687,216,3.711,217,2.956,218,3.711]],["title/classes/CommentRepository.html",[123,0.137,219,2.158]],["body/classes/CommentRepository.html",[7,0.023,13,0.302,14,0.302,15,0.267,18,0.429,57,0.376,71,1.203,122,0.302,123,0.17,124,0.018,125,0.018,131,2.51,133,0.302,155,1.065,158,1.619,161,1.006,164,0.582,174,2.283,177,0.675,200,1.854,204,0.828,219,3.392,220,3.682,221,4.078,222,1.72,223,5.488,224,5.488,225,4.333,226,1.203,227,1.358,228,2.201,229,3.254,230,3.682,231,4.333,232,4.333,233,4.333,234,4.333,235,3.682]],["title/modules/DatabaseModule.html",[0,1.711,8,1.987]],["body/modules/DatabaseModule.html",[0,2.588,2,2.15,3,2.588,7,0.024,8,3.737,10,3.264,11,2.522,12,2.522,13,0.285,14,0.285,15,0.251,17,2.763,18,0.513,19,1.279,25,4.488,26,3.064,120,3.576,122,0.285,123,0.16,124,0.017,125,0.017,153,3.064,219,3.264,236,3.468,237,3.468,238,4.06,239,4.081,240,2.322,241,2.322,242,4.081,243,4.081,244,3.005,245,3.468,246,3.264,247,4.081,248,4.081]],["title/classes/DateScalar.html",[123,0.137,249,2.364]],["body/classes/DateScalar.html",[7,0.024,13,0.229,14,0.229,15,0.202,18,0.356,24,0.911,29,1.729,57,0.549,71,1.574,94,1.729,122,0.229,123,0.129,124,0.015,125,0.015,133,0.229,134,1.055,155,0.807,161,0.548,164,0.761,177,0.816,180,4.099,204,1.002,222,1.43,226,1.456,227,1.643,249,3.089,250,2.789,251,2.819,252,5.244,253,4.457,254,4.562,255,4.562,256,4.562,257,3.389,258,3.877,259,5.244,260,3.281,261,4.562,262,5.668,263,3.281,264,3.281,265,4.562,266,4.033,267,3.281,268,4.562,269,3.281,270,3.281,271,3.281,272,2.086,273,3.281,274,4.562,275,3.281,276,3.281,277,3.281,278,3.281,279,3.281,280,3.281]],["title/modules/GqlApiModule.html",[0,1.711,9,2.158]],["body/modules/GqlApiModule.html",[0,2.311,2,1.813,3,2.311,7,0.024,8,3.56,9,4.212,10,2.914,11,2.127,12,2.127,13,0.24,14,0.24,15,0.212,17,3.192,18,0.523,19,1.079,29,1.813,35,2.925,120,3.192,122,0.24,123,0.135,124,0.015,125,0.015,153,2.585,249,3.192,272,1.574,281,2.925,282,3.442,283,2.925,284,3.56,285,3.067,286,3.297,287,3.442,288,3.442,289,3.192,290,3.442,291,2.331,292,4.571,293,2.585,294,3.192,295,3.442,296,2.585,297,2.925,298,3.442,299,3.192,300,3.442,301,3.442,302,3.442]],["title/guards/HasPermissionsGuard.html",[303,2.622,304,2.364]],["body/guards/HasPermissionsGuard.html",[7,0.024,13,0.223,14,0.223,15,0.197,18,0.491,19,1.002,24,0.888,40,1.567,54,2.075,57,0.389,71,1.244,107,2.717,108,3.033,109,2.164,122,0.223,123,0.126,124,0.015,125,0.015,127,3.033,133,0.223,135,1.586,139,1.567,164,0.602,177,0.697,204,0.856,222,1.404,226,1.244,227,1.002,228,1.797,251,1.976,304,3.033,305,3.883,306,2.717,307,5.015,308,1.368,309,3.197,310,6.116,311,3.197,312,2.717,313,4.208,314,3.197,315,3.364,316,2.942,317,1.492,318,2.717,319,2.717,320,1.567,321,3.197,322,3.197,323,3.364,324,3.197,325,1.819,326,2.401,327,2.164,328,2.717,329,5.172,330,3.197,331,3.197,332,3.197,333,2.401,334,3.197,335,3.197,336,3.647,337,3.197,338,3.197,339,3.197,340,3.197]],["title/classes/HttpExceptionFilter.html",[123,0.137,341,2.622]],["body/classes/HttpExceptionFilter.html",[7,0.023,13,0.286,14,0.286,15,0.252,18,0.458,19,1.284,24,1.137,54,1.643,57,0.355,61,4.405,71,1.137,122,0.286,123,0.161,124,0.017,125,0.017,133,0.286,155,1.007,164,0.55,177,0.638,204,0.782,222,1.659,226,1.137,227,1.284,251,3.272,341,3.975,342,3.481,343,5.866,344,5.866,345,5.294,346,6.421,347,6.201,348,4.096,349,4.499,350,4.096,351,3.076,352,2.531,353,2.531,354,3.076,355,4.096,356,5.294,357,4.096,358,4.096]],["title/injectables/JwtAuthGuard.html",[317,1.163,359,2.158]],["body/injectables/JwtAuthGuard.html",[7,0.024,13,0.413,14,0.225,15,0.198,18,0.462,19,1.011,24,0.895,54,1.808,57,0.28,61,2.421,71,1.443,108,3.518,109,2.183,122,0.225,123,0.127,124,0.015,125,0.015,131,1.475,133,0.225,135,2.095,145,2.183,164,0.605,177,0.702,204,0.861,222,1.412,226,1.252,227,1.412,228,1.808,258,2.74,272,1.475,307,4.415,312,2.74,313,4.224,315,3.384,316,2.956,317,1.501,319,2.74,320,1.58,349,2.74,359,2.785,360,1.699,361,3.901,362,2.74,363,4.507,364,3.225,365,4.507,366,3.225,367,5.626,368,4.507,369,3.225,370,3.225,371,3.225,372,3.225,373,3.225,374,2.74,375,3.225,376,2.74,377,3.225,378,3.225,379,3.225,380,3.225,381,3.225,382,3.225,383,2.74,384,3.225,385,3.225,386,3.225,387,3.225,388,4.507,389,3.225,390,3.225]],["title/interfaces/JwtPayload.html",[126,1.84,391,2.364]],["body/interfaces/JwtPayload.html",[7,0.023,13,0.303,14,0.303,15,0.268,57,0.55,122,0.303,124,0.018,125,0.018,126,2.292,128,2.945,133,0.303,134,1.272,161,1.179,177,1.04,204,1.211,336,3.919,361,3.266,391,3.725,392,3.697,393,2.9,394,6.341]],["title/injectables/JwtStrategy.html",[142,2.158,317,1.163]],["body/injectables/JwtStrategy.html",[7,0.024,13,0.225,14,0.225,15,0.198,18,0.516,19,1.412,21,4.781,22,2.183,40,2.209,49,3.83,57,0.391,71,0.895,76,2.74,122,0.225,123,0.127,124,0.015,125,0.015,131,1.475,133,0.225,135,1.142,136,2.546,138,2.183,142,2.785,145,2.183,146,2.74,147,2.74,152,3.384,164,0.605,177,0.702,188,2.183,204,0.992,222,1.412,226,1.252,227,1.011,308,1.38,317,1.501,325,1.835,326,2.421,327,2.183,336,1.993,360,1.699,391,3.809,393,1.475,395,2.74,396,4.507,397,3.225,398,3.225,399,4.507,400,3.225,401,4.507,402,3.225,403,3.225,404,3.225,405,2.74,406,4.507,407,2.74,408,2.74,409,3.225,410,3.225,411,3.225,412,3.225,413,3.225,414,3.225,415,3.225,416,3.225,417,3.225,418,3.225,419,3.225,420,3.225,421,3.225,422,3.225,423,3.225,424,3.225,425,3.225,426,3.225,427,3.225,428,3.225,429,3.225,430,3.225,431,2.421,432,3.225,433,3.225,434,3.225,435,3.225]],["title/classes/LoggingPlugin.html",[123,0.137,299,2.364]],["body/classes/LoggingPlugin.html",[7,0.023,13,0.3,14,0.3,15,0.265,18,0.427,24,1.194,44,3.902,71,1.194,122,0.3,123,0.169,124,0.018,125,0.018,133,0.3,155,1.057,164,0.577,222,1.711,227,1.347,228,2.191,251,3.375,299,3.697,352,2.657,353,2.657,436,3.654,437,6.002,438,6.314,439,4.3,440,5.1,441,4.3,442,3.654,443,4.3,444,3.654,445,4.3,446,4.3,447,4.3,448,4.3]],["title/classes/Post.html",[123,0.137,159,1.401]],["body/classes/Post.html",[7,0.024,13,0.182,14,0.182,15,0.16,18,0.36,24,0.723,40,3.171,57,0.526,122,0.269,123,0.152,124,0.013,125,0.013,133,0.182,134,0.893,135,2.146,154,2.497,155,0.64,157,2.257,158,1.827,159,1.848,161,1.034,162,2.283,163,2.699,164,0.814,166,3.118,170,3.118,172,3.86,176,3.118,177,1.027,180,3.149,205,2.846,266,2.615,449,2.213,450,2.257,451,3.45,452,3.149,453,3.458,454,3.747,455,2.604,456,3.826,457,2.604,458,2.604,459,2.604,460,2.604,461,2.604,462,2.604,463,2.604,464,2.604,465,2.213,466,2.604,467,2.604,468,2.604,469,2.213,470,2.604]],["title/entities/PostEntity.html",[173,1.711,186,1.711]],["body/entities/PostEntity.html",[7,0.024,13,0.185,14,0.185,15,0.163,18,0.363,40,3.048,57,0.563,73,1.506,93,3.857,122,0.185,123,0.104,124,0.013,125,0.013,133,0.185,134,0.904,154,1.916,157,2.279,158,1.372,161,1.017,162,2.294,164,0.818,173,1.916,174,2.45,176,3.148,177,1.03,178,3.857,180,3.174,181,2.249,182,3.323,184,3.323,186,2.279,187,2.249,193,3.323,195,3.323,196,3.323,197,2.249,198,2.249,199,2.249,200,1.132,202,2.685,203,2.249,204,0.981,205,2.874,206,2.249,228,1.569,240,1.506,450,2.279,451,3.148,452,2.874,453,3.492,454,3.667,471,2.249,472,2.647,473,3.91,474,2.647,475,2.647,476,2.936,477,2.647,478,2.647,479,3.323,480,2.647,481,2.249,482,2.647,483,2.647,484,2.647,485,2.647,486,2.647,487,3.91,488,2.647,489,2.647,490,3.91,491,2.647,492,2.249,493,2.647]],["title/classes/PostInput.html",[123,0.137,494,2.158]],["body/classes/PostInput.html",[7,0.023,13,0.282,14,0.282,15,0.249,18,0.411,24,1.125,40,2.576,57,0.506,122,0.282,123,0.206,124,0.017,125,0.017,133,0.282,134,1.215,155,0.996,157,2.859,158,1.721,161,1.095,162,2.198,163,2.824,164,0.784,177,0.818,211,3.443,214,4.467,215,4.959,216,3.443,217,2.743,218,3.443,452,3.606,454,2.504,456,3.042,494,3.249,495,3.443,496,4.052,497,4.052,498,4.052,499,4.052]],["title/classes/PostNotFoundError.html",[123,0.137,500,2.364]],["body/classes/PostNotFoundError.html",[7,0.023,13,0.296,14,0.296,15,0.262,18,0.332,57,0.47,122,0.296,123,0.167,124,0.018,125,0.018,131,2.479,133,0.296,134,1.253,155,1.045,158,1.761,160,3.145,161,1.085,164,0.728,177,0.662,204,0.812,226,1.18,308,1.819,351,4.483,352,2.627,353,2.627,354,3.192,500,3.671,501,5.073,502,3.192,503,4.608,504,4.608,505,4.251,506,3.613,507,3.613,508,3.613]],["title/classes/PostRepository.html",[123,0.137,244,1.987]],["body/classes/PostRepository.html",[7,0.024,13,0.253,14,0.253,15,0.224,18,0.382,57,0.424,71,1.358,122,0.253,123,0.143,124,0.016,125,0.016,131,2.236,133,0.253,155,0.893,158,1.631,161,1.062,164,0.657,177,0.761,186,1.78,200,1.554,204,0.934,221,3.743,222,1.532,226,1.358,227,1.532,228,2.373,229,2.727,235,3.086,244,2.782,266,4.305,450,1.78,509,3.086,510,4.156,511,4.156,512,4.89,513,5.529,514,5.529,515,3.632,516,5.915,517,4.156,518,3.632,519,3.086,520,3.632,521,3.632,522,3.632,523,3.632,524,3.632,525,3.632,526,3.632,527,3.632]],["title/classes/PostsArgs.html",[123,0.137,528,2.158]],["body/classes/PostsArgs.html",[7,0.024,13,0.262,14,0.262,15,0.231,18,0.391,24,1.042,57,0.488,94,2.961,122,0.262,123,0.196,124,0.016,125,0.016,133,0.262,134,1.156,155,0.923,161,0.939,162,2.117,163,1.716,164,0.755,166,3.805,172,3.805,217,2.541,257,3.198,266,3.384,333,3.754,469,4.777,528,3.089,529,3.19,530,5.621,531,5.621,532,5.621,533,3.753,534,3.753,535,3.753,536,4.999,537,3.753,538,3.753,539,4.999,540,3.753,541,3.753,542,3.753,543,3.753,544,3.753]],["title/injectables/PostsDataInitializer.html",[238,2.158,317,1.163]],["body/injectables/PostsDataInitializer.html",[7,0.024,13,0.145,14,0.145,15,0.128,18,0.407,19,0.65,44,2.474,54,2.426,57,0.282,65,1.763,94,1.093,122,0.145,123,0.081,124,0.011,125,0.011,133,0.145,134,0.751,135,1.603,139,1.592,154,1.962,157,3.054,158,0.958,159,0.832,164,0.538,174,2.109,177,0.323,180,1.282,186,1.962,188,1.404,200,1.713,202,1.962,204,0.765,205,1.282,207,1.763,221,1.404,222,1.018,226,0.576,227,0.65,228,1.303,230,1.763,238,2.007,241,3.101,244,2.967,245,1.763,251,1.282,257,1.18,272,2.493,308,1.39,317,1.082,360,1.093,376,1.763,393,1.485,450,1.016,452,3.369,476,1.557,519,1.763,545,3.849,546,1.763,547,3.039,548,5.216,549,1.763,550,4.53,551,4.918,552,2.074,553,2.074,554,3.248,555,2.76,556,2.76,557,3.248,558,3.248,559,3.248,560,3.248,561,2.76,562,3.248,563,2.074,564,1.763,565,4.457,566,2.074,567,2.074,568,2.074,569,2.074,570,2.074,571,2.074,572,2.074,573,3.248,574,2.074,575,2.074,576,2.074,577,2.074,578,2.074,579,2.074,580,2.074,581,2.074,582,2.074,583,2.074,584,4.003,585,2.074,586,2.074,587,2.074,588,2.074,589,2.074,590,2.074,591,2.074,592,2.074,593,2.074,594,3.248,595,2.074,596,2.074,597,2.074,598,2.074,599,2.074,600,2.074,601,3.248,602,2.074,603,2.074,604,1.763,605,1.763,606,3.849,607,2.074,608,2.074,609,2.074,610,2.074,611,2.074,612,2.074,613,2.074,614,2.074,615,2.074,616,2.074,617,2.074,618,2.074,619,2.074,620,3.248,621,2.074,622,2.074,623,2.074,624,2.074,625,2.074]],["title/injectables/PostsLoaders.html",[284,1.987,317,1.163]],["body/injectables/PostsLoaders.html",[7,0.024,13,0.188,14,0.188,15,0.166,18,0.451,19,0.843,57,0.234,71,1.7,94,2.474,122,0.188,123,0.106,124,0.013,125,0.013,133,0.188,134,0.915,135,1.401,139,2.827,160,2.085,161,0.865,164,0.631,177,0.419,204,0.514,226,0.747,257,2.252,272,2.639,284,2.252,285,2.537,286,3.143,291,1.822,296,2.021,308,1.694,317,1.318,320,1.319,360,1.418,547,2.446,626,2.287,627,4.333,628,4.696,629,4.696,630,2.691,631,2.691,632,3.959,633,3.959,634,5.178,635,3.959,636,5.518,637,3.959,638,3.959,639,3.959,640,3.959,641,3.959,642,3.959,643,3.959,644,2.691,645,3.959,646,3.959,647,3.959,648,3.959,649,3.959,650,3.959,651,3.364,652,2.691,653,3.959,654,3.364,655,1.822,656,1.663,657,2.691]],["title/classes/PostsResolver.html",[123,0.137,289,2.364]],["body/classes/PostsResolver.html",[7,0.024,13,0.233,14,0.111,15,0.098,18,0.493,19,0.497,24,0.441,29,0.836,44,3.021,54,1.556,57,0.424,71,1.471,122,0.111,123,0.062,124,0.009,125,0.009,133,0.111,135,1.52,136,1.901,138,1.074,139,1.638,154,2.265,155,0.39,158,0.773,159,2.55,161,0.558,162,1.841,163,0.726,164,0.686,177,0.761,204,1.012,205,1.618,209,3.129,222,0.821,226,1.357,227,1.532,228,1.556,240,1.49,241,2.207,272,0.726,284,2.781,285,2.265,289,1.773,291,1.074,292,4.154,293,1.192,297,1.349,304,2.263,308,1.121,316,3.104,320,0.778,325,0.903,327,1.074,359,0.981,450,1.283,451,1.773,494,2.398,500,1.074,528,2.398,547,2.066,565,2.913,604,1.349,627,1.192,656,0.981,658,1.349,659,2.841,660,3.88,661,2.841,662,2.619,663,2.619,664,2.619,665,1.587,666,1.587,667,1.587,668,2.226,669,1.587,670,2.619,671,1.587,672,1.587,673,3.343,674,1.587,675,1.587,676,1.349,677,1.587,678,1.587,679,1.587,680,1.587,681,1.587,682,2.619,683,1.587,684,2.619,685,1.587,686,2.619,687,1.587,688,1.587,689,1.587,690,3.343,691,1.349,692,0.981,693,1.349,694,1.349,695,1.966,696,1.349,697,1.349,698,1.587,699,1.192,700,1.349,701,1.773,702,1.349,703,1.349,704,1.192,705,2.619,706,1.587,707,1.587,708,1.349,709,1.349,710,1.587,711,1.349,712,1.587,713,1.349,714,1.349,715,1.349,716,1.349,717,1.349,718,1.349,719,1.349,720,1.587,721,2.619,722,1.587,723,1.587,724,1.587,725,1.587,726,1.587,727,1.587,728,1.587,729,1.587,730,1.587,731,2.226,732,1.587,733,2.619,734,1.074,735,1.349,736,1.587,737,1.587,738,1.587,739,1.587,740,1.587,741,1.587,742,2.226,743,2.619,744,1.587,745,1.587,746,2.226,747,2.226,748,2.619,749,1.587,750,1.587,751,1.587,752,1.587,753,1.587,754,1.074,755,1.587,756,1.587,757,1.587,758,1.587]],["title/injectables/PostsService.html",[285,1.711,317,1.163]],["body/injectables/PostsService.html",[7,0.024,13,0.116,14,0.116,15,0.102,18,0.452,19,0.519,54,0.665,57,0.48,71,1.636,73,0.943,122,0.116,123,0.065,124,0.009,125,0.009,133,0.116,139,1.33,154,2.547,157,2.441,158,1.707,159,1.763,160,1.815,161,1.07,164,0.744,173,0.812,174,1.43,176,1.837,177,0.862,186,2.441,188,1.122,200,0.709,204,1.058,219,3.079,222,0.85,226,1.537,227,1.686,241,1.96,244,2.684,272,0.758,285,1.33,308,1.161,316,3.449,317,0.904,320,0.812,360,0.873,450,0.812,451,2.697,452,2.13,453,2.038,494,2.462,510,2.306,511,2.306,517,2.306,528,2.462,547,3.213,549,1.409,605,2.928,651,1.409,655,1.122,656,1.024,659,2.306,661,2.306,692,1.024,699,1.245,713,1.409,714,1.409,715,1.409,716,1.409,734,1.837,754,1.837,759,1.409,760,2.306,761,2.714,762,2.714,763,2.714,764,2.714,765,1.657,766,2.714,767,1.657,768,2.714,769,1.657,770,2.714,771,1.657,772,1.657,773,1.657,774,2.714,775,1.657,776,2.714,777,1.657,778,1.409,779,2.714,780,1.657,781,1.657,782,2.714,783,1.657,784,2.306,785,1.409,786,1.657,787,1.657,788,1.657,789,1.657,790,1.657,791,1.657,792,1.657,793,3.385,794,4.01,795,2.714,796,1.657,797,1.657,798,1.657,799,2.714,800,1.657,801,1.657,802,1.657,803,1.657,804,1.657,805,1.657,806,1.657,807,1.657,808,1.657,809,1.657,810,1.657,811,1.657,812,1.657,813,2.714,814,3.446,815,1.657,816,1.409,817,1.657,818,1.657,819,1.657,820,2.306,821,2.714,822,2.714,823,2.714,824,2.714,825,2.714,826,1.657]],["title/classes/UpdateUserResult.html",[123,0.137,827,2.364]],["body/classes/UpdateUserResult.html",[7,0.023,13,0.309,14,0.309,15,0.273,18,0.347,24,1.232,57,0.483,117,5.174,122,0.309,123,0.174,124,0.018,125,0.018,133,0.309,134,1.288,155,1.091,161,0.93,162,2.098,163,3.009,164,0.748,170,3.771,177,0.867,315,4.182,827,3.771,828,5.174,829,3.77,830,5.174,831,4.436,832,4.436]],["title/classes/UpperCaseDirective.html",[105,2.364,123,0.137]],["body/classes/UpperCaseDirective.html",[7,0.024,13,0.276,14,0.276,15,0.244,18,0.405,29,2.731,44,2.451,54,2.079,57,0.344,71,1.439,105,3.509,122,0.276,123,0.156,124,0.017,125,0.017,131,2.371,133,0.276,155,0.975,161,0.662,163,2.371,164,0.533,177,0.617,204,0.757,222,1.624,226,1.101,227,1.243,565,2.978,692,2.451,833,4.405,834,3.37,835,5.775,836,5.184,837,5.184,838,6.125,839,3.966,840,3.966,841,3.37,842,5.184,843,3.966,844,3.966,845,3.966,846,4.908,847,3.966,848,3.966,849,3.966]],["title/classes/User.html",[123,0.137,135,1.236]],["body/classes/User.html",[7,0.024,13,0.252,14,0.252,15,0.223,18,0.381,24,1.005,40,3.113,57,0.513,122,0.252,123,0.142,124,0.016,125,0.016,133,0.252,134,1.128,135,1.727,155,0.89,158,1.874,159,2.369,161,1.061,162,2.225,163,2.524,164,0.793,166,3.303,170,3.303,171,3.076,172,3.303,177,1.028,204,1.054,240,3.14,393,2.524,454,3.651,456,3.664,850,3.076,851,3.62,852,3.62,853,3.62,854,3.62]],["title/entities/UserEntity.html",[173,1.711,202,1.711]],["body/entities/UserEntity.html",[7,0.024,13,0.252,14,0.252,15,0.222,18,0.282,40,3.11,57,0.478,73,2.053,94,3.108,122,0.252,123,0.142,124,0.016,125,0.016,133,0.252,134,1.126,158,1.817,159,1.447,161,1.06,162,2.075,164,0.74,173,2.386,177,0.918,178,4.138,186,1.768,200,1.544,202,2.386,204,1.212,228,1.447,240,2.053,393,2.52,454,3.009,476,2.71,479,3.067,481,4.138,492,3.067,855,3.067,856,4.869,857,4.869,858,3.609,859,4.869,860,3.609,861,4.869,862,3.609,863,3.609,864,3.609,865,3.609]],["title/classes/UserNotFoundError.html",[123,0.137,866,2.364]],["body/classes/UserNotFoundError.html",[7,0.023,13,0.296,14,0.296,15,0.262,18,0.332,57,0.47,122,0.296,123,0.167,124,0.018,125,0.018,131,2.479,133,0.296,134,1.253,155,1.045,158,1.761,160,3.145,161,1.085,164,0.728,177,0.662,204,0.812,226,1.18,308,1.819,351,4.483,352,2.627,353,2.627,354,3.192,502,3.192,503,4.608,504,4.608,506,3.613,507,3.613,508,3.613,866,3.671,867,5.073,868,4.251]],["title/interfaces/UserPrincipal.html",[126,1.84,136,1.711]],["body/interfaces/UserPrincipal.html",[7,0.023,13,0.296,14,0.296,15,0.262,18,0.332,57,0.546,122,0.296,124,0.018,125,0.018,126,2.24,128,2.878,133,0.296,134,1.253,136,2.657,161,1.152,177,1.034,204,1.201,325,3.577,326,3.192,327,2.878,336,3.886,393,2.875,431,4.721,869,3.613,870,3.613]],["title/classes/UserRepository.html",[123,0.137,246,2.158]],["body/classes/UserRepository.html",[7,0.023,13,0.304,14,0.304,15,0.269,18,0.431,57,0.379,71,1.213,122,0.304,123,0.171,124,0.018,125,0.018,131,2.522,133,0.304,155,1.074,161,1.009,164,0.586,177,0.68,200,1.869,202,2.14,204,0.834,221,4.092,222,1.728,226,1.213,227,1.368,228,2.212,229,3.279,246,3.408,393,2.764,564,3.711,871,3.711,872,5.515,873,5.515,874,4.367,875,4.367,876,4.367]],["title/classes/UsersResolver.html",[123,0.137,294,2.364]],["body/classes/UsersResolver.html",[7,0.024,13,0.168,14,0.168,15,0.148,18,0.503,19,0.753,24,0.667,54,0.964,57,0.425,71,1.219,122,0.168,123,0.094,124,0.012,125,0.012,133,0.168,135,2.322,136,2.399,138,1.627,139,1.782,155,0.591,158,1.295,159,1.459,161,0.733,162,1.653,164,0.657,177,0.762,204,1.131,222,1.14,226,1.359,227,1.376,240,2.069,272,1.099,285,2.816,286,2.915,291,1.627,294,2.463,296,1.804,308,1.556,316,3.269,320,1.177,359,1.485,393,1.664,431,2.731,450,1.782,465,3.091,547,2.248,627,3.296,655,1.627,656,1.485,668,2.042,676,2.042,691,2.042,692,1.485,693,2.042,694,2.042,695,3.296,696,2.042,697,2.042,700,2.042,701,1.627,702,2.042,703,2.042,708,2.042,709,2.042,711,2.042,717,2.042,719,2.042,731,2.042,734,1.627,735,2.042,742,2.042,746,2.042,747,2.042,754,1.627,827,2.463,830,2.042,866,1.627,877,2.042,878,3.638,879,3.638,880,2.403,881,2.403,882,2.403,883,2.403,884,3.638,885,3.638,886,2.403,887,2.403,888,2.403,889,2.403,890,2.403,891,2.403,892,2.403,893,2.403,894,2.403,895,2.403,896,2.403,897,2.403,898,2.042,899,2.403,900,2.403,901,2.403,902,2.403,903,2.403,904,2.403,905,2.403,906,2.403,907,2.403,908,2.403]],["title/injectables/UsersService.html",[286,1.84,317,1.163]],["body/injectables/UsersService.html",[7,0.024,13,0.179,14,0.179,15,0.158,18,0.459,19,0.803,54,1.83,57,0.492,71,1.574,122,0.179,123,0.101,124,0.013,125,0.013,133,0.179,135,1.79,139,1.255,158,1.672,161,1.03,164,0.679,177,0.787,200,1.096,202,1.255,204,1.153,222,1.196,226,1.404,227,1.43,228,1.028,246,3.503,286,2.011,308,1.096,316,3.34,317,1.271,320,1.255,328,2.177,360,1.35,393,2.472,655,1.735,656,1.583,699,1.924,718,2.177,734,2.584,754,1.735,760,3.244,778,2.177,784,3.244,785,2.177,793,2.177,794,2.177,816,2.177,820,2.177,846,2.177,909,2.177,910,3.817,911,4.562,912,2.562,913,2.562,914,2.562,915,3.817,916,2.562,917,3.817,918,3.817,919,2.562,920,2.562,921,2.562,922,2.562,923,3.817,924,2.562,925,2.562,926,2.562,927,3.817,928,2.562,929,2.562,930,2.562,931,2.562,932,2.562,933,2.562,934,2.562,935,2.562,936,2.562,937,2.562,938,2.562,939,2.562,940,2.562,941,2.562,942,2.562,943,2.562,944,2.562,945,3.817,946,2.562,947,2.562,948,2.562,949,2.562,950,2.562,951,2.562]],["title/coverage.html",[952,3.576]],["body/coverage.html",[7,0.023,15,0.16,57,0.225,105,1.755,123,0.266,124,0.013,125,0.013,126,2.42,127,1.755,129,2.202,130,2.202,135,0.917,136,1.27,142,1.602,154,1.27,156,2.202,159,1.04,173,2.251,174,1.365,175,2.202,186,1.27,202,1.27,209,1.755,210,2.202,219,1.602,220,2.202,238,1.602,241,1.474,244,1.474,246,1.602,249,1.755,250,2.202,272,1.185,284,1.474,285,1.27,286,1.365,289,1.755,294,1.755,299,1.755,303,1.946,304,1.755,305,2.891,306,2.202,317,1.895,323,1.946,333,5.331,341,1.946,342,2.202,359,1.602,361,2.891,362,2.202,391,1.755,392,2.202,395,2.202,436,2.202,449,2.202,471,2.202,494,1.602,495,2.202,500,1.755,501,2.202,502,2.891,509,2.202,528,1.602,529,2.202,545,2.202,546,2.202,626,2.202,658,2.202,701,1.755,704,1.946,759,2.202,827,1.755,828,2.202,829,2.202,833,2.202,834,2.202,850,2.202,855,2.202,866,1.755,867,2.202,869,2.202,870,2.202,871,2.202,877,2.202,909,2.202,952,1.946,953,2.592,954,2.592,955,2.592,956,5.692,957,2.202,958,4.593,959,5.894,960,2.202,961,2.202,962,2.202,963,6.054,964,5.894,965,5.084,966,3.85,967,2.592,968,2.202,969,2.592,970,2.202,971,2.592,972,2.592]],["title/dependencies.html",[3,2.058,973,2.48]],["body/dependencies.html",[3,1.909,7,0.024,19,1.221,22,2.638,24,1.082,26,2.926,29,2.7,123,0.201,124,0.017,125,0.017,137,4.355,145,2.638,152,2.926,217,2.638,293,2.926,318,3.312,320,1.909,352,3.539,353,3.539,405,4.355,407,3.312,408,3.312,440,3.312,442,3.312,654,3.312,841,3.312,974,3.897,975,3.897,976,3.897,977,6.083,978,3.897,979,3.897,980,3.897,981,3.897,982,5.125,983,3.897,984,3.897,985,3.897,986,3.897,987,5.125,988,3.897,989,3.897,990,3.897,991,3.897,992,3.897,993,3.897,994,3.897,995,3.897,996,3.897,997,3.897,998,3.897,999,3.897,1000,3.897]],["title/miscellaneous/enumerations.html",[1001,1.66,1002,3.569]],["body/miscellaneous/enumerations.html",[7,0.022,124,0.02,125,0.02,133,0.352,257,3.669,325,3.433,1001,2.876,1002,4.296,1003,5.056,1004,6.034,1005,5.056,1006,5.056,1007,5.056,1008,5.056,1009,5.056,1010,5.056,1011,5.056]],["title/miscellaneous/functions.html",[1001,1.66,1012,3.569]],["body/miscellaneous/functions.html",[7,0.021,124,0.021,125,0.021,133,0.374,968,4.564,970,5.622,1001,3.055,1012,4.564,1013,5.37]],["title/index.html",[133,0.203,444,2.48,1014,2.919]],["body/index.html",[3,1.785,7,0.023,24,1.012,29,3.12,124,0.016,125,0.016,200,1.559,374,3.096,555,5.252,556,3.096,561,3.096,606,4.165,695,2.736,952,3.68,1015,4.901,1016,3.644,1017,4.901,1018,3.644,1019,4.901,1020,3.644,1021,3.644,1022,3.644,1023,3.644,1024,3.644,1025,4.901,1026,3.644,1027,4.901,1028,3.644,1029,3.644,1030,3.644,1031,3.644,1032,4.901,1033,3.644,1034,3.644,1035,3.644,1036,3.644,1037,3.644,1038,3.644,1039,3.644,1040,3.644,1041,3.644,1042,3.644,1043,6.504,1044,3.644,1045,3.644,1046,6.365,1047,3.644,1048,3.644,1049,4.901,1050,3.644,1051,3.644,1052,3.644,1053,3.644,1054,4.901,1055,3.644,1056,3.644,1057,3.644,1058,3.644,1059,3.644,1060,4.901,1061,4.901,1062,4.901,1063,4.901,1064,3.644,1065,3.644]],["title/modules.html",[2,2.509]],["body/modules.html",[1,3.423,2,2.663,6,3.124,7,0.02,8,2.876,9,3.124,124,0.02,125,0.02,1066,6.681,1067,6.681,1068,6.681,1069,6.681]],["title/overview.html",[1070,4.047]],["body/overview.html",[1,4.564,2,2.097,3,2.546,4,3.382,5,3.382,6,3.932,7,0.023,8,3.712,9,4.282,10,3.211,11,2.459,12,2.459,73,2.264,124,0.017,125,0.017,128,2.694,140,3.382,141,3.382,142,3.575,155,0.978,236,3.382,237,3.382,238,3.575,281,3.382,283,3.382,284,3.291,285,2.835,286,3.048,303,2.988,360,2.097,1070,3.382,1071,3.98,1072,5.196,1073,3.98,1074,3.98,1075,3.98]],["title/properties.html",[134,0.971,973,2.48]],["body/properties.html",[7,0.023,124,0.02,125,0.02,134,1.224,253,4.499,450,2.594,898,4.499,1076,5.294,1077,5.294,1078,5.294]],["title/miscellaneous/variables.html",[1001,1.66,1079,3.569]],["body/miscellaneous/variables.html",[7,0.023,54,2.196,57,0.375,71,1.199,94,3.167,108,3.706,109,2.922,124,0.018,125,0.018,133,0.301,136,2.115,161,0.721,241,2.456,257,3.42,305,3.241,313,3.241,323,4.111,325,2.456,336,2.668,383,3.668,692,3.383,701,3.706,704,4.111,957,3.668,960,3.668,961,4.653,962,4.653,1001,2.456,1079,3.668,1080,4.317,1081,4.317,1082,4.317,1083,4.317,1084,4.317,1085,4.317,1086,4.317,1087,4.317]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":333,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"classes/PostsArgs.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1076,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":986,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":989,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":985,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":967,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["03t09:54:33z",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["1",{"_index":1075,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":978,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":975,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["18",{"_index":1074,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":987,"title":{},"body":{"dependencies.html":{}}}],["2.0.4",{"_index":988,"title":{},"body":{"dependencies.html":{}}}],["2019",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["25",{"_index":536,"title":{},"body":{"classes/PostsArgs.html":{}}}],["3",{"_index":1072,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":983,"title":{},"body":{"dependencies.html":{}}}],["3.5.0",{"_index":982,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1071,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":990,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["6",{"_index":1073,"title":{},"body":{"overview.html":{}}}],["7.10.0",{"_index":976,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":998,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":977,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":981,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":992,"title":{},"body":{"dependencies.html":{}}}],["9.0.4",{"_index":979,"title":{},"body":{"dependencies.html":{}}}],["actions",{"_index":1034,"title":{},"body":{"index.html":{}}}],["add",{"_index":373,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["addcomment",{"_index":659,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["addcomment(commentinput",{"_index":667,"title":{},"body":{"classes/PostsResolver.html":{}}}],["addcomment(commentinput.postid",{"_index":752,"title":{},"body":{"classes/PostsResolver.html":{}}}],["addcomment(id",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{}}}],["addcommenthandler",{"_index":660,"title":{},"body":{"classes/PostsResolver.html":{}}}],["admin",{"_index":861,"title":{},"body":{"entities/UserEntity.html":{}}}],["admin@example.com",{"_index":857,"title":{},"body":{"entities/UserEntity.html":{}}}],["algorithms",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["anatomy",{"_index":1059,"title":{},"body":{"index.html":{}}}],["api",{"_index":1062,"title":{},"body":{"index.html":{}}}],["api.module",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["api.module.ts",{"_index":288,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["apis",{"_index":559,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["apollo",{"_index":352,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LoggingPlugin.html":{},"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{},"dependencies.html":{}}}],["apolloerror",{"_index":351,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["apolloserverplugin",{"_index":437,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["app",{"_index":1045,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":692,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UsersResolver.html":{},"miscellaneous/variables.html":{}}}],["args('commentinput",{"_index":751,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args('createpostinput",{"_index":749,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args.skip",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["args.take",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["argstype",{"_index":539,"title":{},"body":{"classes/PostsArgs.html":{}}}],["arguments",{"_index":390,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["argumentshost",{"_index":347,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ast",{"_index":264,"title":{},"body":{"classes/DateScalar.html":{}}}],["ast.kind",{"_index":277,"title":{},"body":{"classes/DateScalar.html":{}}}],["async",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"classes/LoggingPlugin.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"classes/UpperCaseDirective.html":{}}}],["audience",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth.guard",{"_index":709,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["auth.guard.ts",{"_index":362,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:13",{"_index":364,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:24",{"_index":366,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth0.net",{"_index":1021,"title":{},"body":{"index.html":{}}}],["auth0config",{"_index":146,"title":{},"body":{"modules/AuthzModule.html":{},"injectables/JwtStrategy.html":{}}}],["authenticated",{"_index":321,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["authenticatedrequest",{"_index":127,"title":{"interfaces/AuthenticatedRequest.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"guards/HasPermissionsGuard.html":{},"coverage.html":{}}}],["authentication",{"_index":374,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"index.html":{}}}],["authguard",{"_index":371,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":372,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["author",{"_index":450,"title":{},"body":{"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"properties.html":{}}}],["author_id",{"_index":473,"title":{},"body":{"entities/PostEntity.html":{}}}],["authorid",{"_index":451,"title":{},"body":{"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["authorids",{"_index":635,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authorids.map((authorid",{"_index":642,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["authz.constants",{"_index":324,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["authz/authz.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["authz/gql",{"_index":702,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["authz/has",{"_index":705,"title":{},"body":{"classes/PostsResolver.html":{}}}],["authz/jwt",{"_index":708,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["authz/permission",{"_index":710,"title":{},"body":{"classes/PostsResolver.html":{}}}],["authz/user",{"_index":711,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["authzmodule",{"_index":6,"title":{"modules/AuthzModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules.html":{},"overview.html":{}}}],["autoloadentities",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["autoschemafile",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":565,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"classes/UpperCaseDirective.html":{}}}],["b",{"_index":908,"title":{},"body":{"classes/UsersResolver.html":{}}}],["base",{"_index":442,"title":{},"body":{"classes/LoggingPlugin.html":{},"dependencies.html":{}}}],["based",{"_index":389,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["batchauthorsloader",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["batchauthorsloader(usersservice",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["boolean",{"_index":315,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/UpdateUserResult.html":{}}}],["boolean(cfg.url",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrap",{"_index":970,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1069,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1066,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1041,"title":{},"body":{"index.html":{}}}],["building",{"_index":1039,"title":{},"body":{"index.html":{}}}],["buildschemaoptions",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["c",{"_index":604,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{}}}],["c.content",{"_index":605,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{}}}],["c.id",{"_index":814,"title":{},"body":{"injectables/PostsService.html":{}}}],["c.postid",{"_index":651,"title":{},"body":{"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{}}}],["cache",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["call",{"_index":378,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate",{"_index":307,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":312,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":479,"title":{},"body":{"entities/PostEntity.html":{},"entities/UserEntity.html":{}}}],["case.directive.ts",{"_index":834,"title":{},"body":{"classes/UpperCaseDirective.html":{},"coverage.html":{}}}],["case.directive.ts:5",{"_index":839,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["catch",{"_index":344,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":345,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":355,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["cfg",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.database",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.host",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.password",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.port",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.type",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.url",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["cfg.username",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["chapter",{"_index":1058,"title":{},"body":{"index.html":{}}}],["class",{"_index":123,"title":{"classes/Comment.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":155,"title":{},"body":{"classes/Comment.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"overview.html":{}}}],["client",{"_index":274,"title":{},"body":{"classes/DateScalar.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authzmodule",{"_index":140,"title":{},"body":{"modules/AuthzModule.html":{},"overview.html":{}}}],["cluster_authzmodule_providers",{"_index":141,"title":{},"body":{"modules/AuthzModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":236,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":237,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_gqlapimodule",{"_index":281,"title":{},"body":{"modules/GqlApiModule.html":{},"overview.html":{}}}],["cluster_gqlapimodule_imports",{"_index":282,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["cluster_gqlapimodule_providers",{"_index":283,"title":{},"body":{"modules/GqlApiModule.html":{},"overview.html":{}}}],["code",{"_index":1017,"title":{},"body":{"index.html":{}}}],["codes",{"_index":1026,"title":{},"body":{"index.html":{}}}],["column",{"_index":178,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"entities/UserEntity.html":{}}}],["column({nullable",{"_index":481,"title":{},"body":{"entities/PostEntity.html":{},"entities/UserEntity.html":{}}}],["comment",{"_index":154,"title":{"classes/Comment.html":{}},"body":{"classes/Comment.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["comment)@useguards(jwtauthguard",{"_index":669,"title":{},"body":{"classes/PostsResolver.html":{}}}],["comment.content",{"_index":615,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["comment.entity",{"_index":491,"title":{},"body":{"entities/PostEntity.html":{}}}],["comment.model",{"_index":467,"title":{},"body":{"classes/Post.html":{}}}],["comment.post",{"_index":193,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["commentadded",{"_index":673,"title":{},"body":{"classes/PostsResolver.html":{}}}],["commentdel",{"_index":581,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["commentdel.affected",{"_index":585,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["commententity",{"_index":174,"title":{"entities/CommentEntity.html":{}},"body":{"entities/CommentEntity.html":{},"classes/CommentRepository.html":{},"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["commentinput",{"_index":209,"title":{"classes/CommentInput.html":{}},"body":{"classes/CommentInput.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["commentinput.content",{"_index":753,"title":{},"body":{"classes/PostsResolver.html":{}}}],["commentrepository",{"_index":219,"title":{"classes/CommentRepository.html":{}},"body":{"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["comments",{"_index":205,"title":{},"body":{"entities/CommentEntity.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{}}}],["comments(@parent",{"_index":743,"title":{},"body":{"classes/PostsResolver.html":{}}}],["comments(post",{"_index":675,"title":{},"body":{"classes/PostsResolver.html":{}}}],["comments.filter((c",{"_index":650,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["compodoc/compodoc",{"_index":974,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["config.audience",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config.issueruri",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config.issueruri}.well",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config/auth0.config",{"_index":147,"title":{},"body":{"modules/AuthzModule.html":{},"injectables/JwtStrategy.html":{}}}],["config/db.config",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{}}}],["configmodule.forfeature(auth0config",{"_index":149,"title":{},"body":{"modules/AuthzModule.html":{}}}],["configmodule.forfeature(dbconfig",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["connect",{"_index":560,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["console.log('comments",{"_index":583,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["console.log('dataloaders",{"_index":634,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["console.log('gql",{"_index":905,"title":{},"body":{"classes/UsersResolver.html":{}}}],["console.log('gqlhost",{"_index":358,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["console.log('graphqlerror",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('has",{"_index":338,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["console.log('jwt",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["console.log('posts",{"_index":588,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["console.log('request",{"_index":443,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["console.log('resovle",{"_index":740,"title":{},"body":{"classes/PostsResolver.html":{}}}],["console.log('route",{"_index":334,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["console.log('saved",{"_index":620,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["console.log('tap",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log('users",{"_index":592,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["console.log('will",{"_index":446,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["console.log(e",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(r",{"_index":939,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":308,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostNotFoundError.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UserNotFoundError.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["constructor(@inject(auth0config.key",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(config",{"_index":397,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(id",{"_index":503,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["constructor(postrepository",{"_index":549,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{}}}],["constructor(postservice",{"_index":630,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["constructor(postsservice",{"_index":665,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":328,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":309,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["constructor(userrepository",{"_index":912,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":880,"title":{},"body":{"classes/UsersResolver.html":{}}}],["content",{"_index":157,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":331,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["continuous",{"_index":1035,"title":{},"body":{"index.html":{}}}],["controllers",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":952,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":557,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["created_at",{"_index":182,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["createdat",{"_index":176,"title":{},"body":{"entities/CommentEntity.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{}}}],["createdatecolumn",{"_index":195,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["createdatecolumn({name",{"_index":181,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["createparamdecorator",{"_index":1083,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":661,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["createpost(authorid",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(user",{"_index":678,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createquerybuilder",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["ctx",{"_index":383,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext",{"_index":385,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["custom",{"_index":258,"title":{},"body":{"classes/DateScalar.html":{},"injectables/JwtAuthGuard.html":{}}}],["customscalar",{"_index":252,"title":{},"body":{"classes/DateScalar.html":{}}}],["d",{"_index":601,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["data",{"_index":241,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data.content",{"_index":808,"title":{},"body":{"injectables/PostsService.html":{}}}],["data.id",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{}}}],["data.title",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{}}}],["database",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsDataInitializer.html":{}}}],["database/database.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/GqlApiModule.html":{}}}],["database/entity/comment.entity",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{}}}],["database/entity/post.entity",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{}}}],["database/entity/user.entity",{"_index":921,"title":{},"body":{"injectables/UsersService.html":{}}}],["database/repository/comment.repository",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{}}}],["database/repository/post.repository",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{}}}],["database/repository/user.repository",{"_index":922,"title":{},"body":{"injectables/UsersService.html":{}}}],["databasemodule",{"_index":8,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"modules.html":{},"overview.html":{}}}],["dataloader",{"_index":654,"title":{},"body":{"injectables/PostsLoaders.html":{},"dependencies.html":{}}}],["dataloader((authorids",{"_index":633,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["dataloader((postids",{"_index":645,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["dataloaders/posts.loaders",{"_index":297,"title":{},"body":{"modules/GqlApiModule.html":{},"classes/PostsResolver.html":{}}}],["date",{"_index":180,"title":{},"body":{"entities/CommentEntity.html":{},"classes/DateScalar.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{}}}],["date(ast.value",{"_index":279,"title":{},"body":{"classes/DateScalar.html":{}}}],["date(value",{"_index":273,"title":{},"body":{"classes/DateScalar.html":{}}}],["datescalar",{"_index":249,"title":{"classes/DateScalar.html":{}},"body":{"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"coverage.html":{}}}],["datescalarmode",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["dbconfig.key",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["decorators",{"_index":162,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"classes/UpdateUserResult.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UsersResolver.html":{}}}],["default",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"classes/DateScalar.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"entities/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultfieldresolver",{"_index":842,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["defaultstrategy",{"_index":151,"title":{},"body":{"modules/AuthzModule.html":{}}}],["defined",{"_index":164,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":586,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["del.affected",{"_index":589,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["delete:posts",{"_index":1011,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["delete_posts",{"_index":1010,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["deleted",{"_index":584,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deprecated(reason",{"_index":897,"title":{},"body":{"classes/UsersResolver.html":{}}}],["description",{"_index":253,"title":{},"body":{"classes/DateScalar.html":{},"properties.html":{}}}],["developing",{"_index":1060,"title":{},"body":{"index.html":{}}}],["development",{"_index":1019,"title":{},"body":{"index.html":{}}}],["directive",{"_index":465,"title":{},"body":{"classes/Post.html":{},"classes/UsersResolver.html":{}}}],["directive('@deprecated(reason",{"_index":883,"title":{},"body":{"classes/UsersResolver.html":{}}}],["directive('@key(fields",{"_index":468,"title":{},"body":{"classes/Post.html":{}}}],["directive('@upper",{"_index":470,"title":{},"body":{"classes/Post.html":{}}}],["directive('@upper')@field",{"_index":462,"title":{},"body":{"classes/Post.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["docker",{"_index":1037,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1040,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["don't",{"_index":578,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["dto/comment.input",{"_index":712,"title":{},"body":{"classes/PostsResolver.html":{}}}],["dto/post.input",{"_index":713,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["dto/posts.arg",{"_index":714,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["e",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.authorid",{"_index":825,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.content",{"_index":822,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.createdat",{"_index":823,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.email",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["e.g",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["e.id",{"_index":820,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["e.map((c",{"_index":813,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.name",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["e.title",{"_index":821,"title":{},"body":{"injectables/PostsService.html":{}}}],["e.updatedat",{"_index":824,"title":{},"body":{"injectables/PostsService.html":{}}}],["e2e",{"_index":1055,"title":{},"body":{"index.html":{}}}],["email",{"_index":393,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/UserEntity.html":{},"overview.html":{}}}],["entities.map((e",{"_index":826,"title":{},"body":{"injectables/PostsService.html":{}}}],["entity",{"_index":173,"title":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"entities/UserEntity.html":{}},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["entity/comment.entity",{"_index":230,"title":{},"body":{"classes/CommentRepository.html":{},"injectables/PostsDataInitializer.html":{}}}],["entity/post.entity",{"_index":519,"title":{},"body":{"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{}}}],["entity/user.entity",{"_index":564,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"classes/UserRepository.html":{}}}],["entitymanager",{"_index":551,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["entityrepository",{"_index":229,"title":{},"body":{"classes/CommentRepository.html":{},"classes/PostRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(commententity",{"_index":231,"title":{},"body":{"classes/CommentRepository.html":{}}}],["entityrepository(postentity",{"_index":520,"title":{},"body":{"classes/PostRepository.html":{}}}],["entityrepository(userentity",{"_index":875,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":1002,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":367,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["error?.extensions?.exception?.message",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["error?.message",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["errors",{"_index":354,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["establish",{"_index":380,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["etc",{"_index":1032,"title":{},"body":{"index.html":{}}}],["example",{"_index":377,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["exception",{"_index":349,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{}}}],["excluded.\"${key}\"`).join",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["execute",{"_index":936,"title":{},"body":{"injectables/UsersService.html":{}}}],["executioncontext",{"_index":313,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["executioncontexthost",{"_index":369,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncontexthost([req",{"_index":387,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["export",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":153,"title":{},"body":{"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{}}}],["express",{"_index":137,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"dependencies.html":{}}}],["extended",{"_index":1029,"title":{},"body":{"index.html":{}}}],["extends",{"_index":131,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/CommentRepository.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/UpperCaseDirective.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":403,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":865,"title":{},"body":{"entities/UserEntity.html":{}}}],["field",{"_index":163,"title":{},"body":{"classes/Comment.html":{},"classes/CommentInput.html":{},"classes/Post.html":{},"classes/PostInput.html":{},"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{}}}],["field((type",{"_index":172,"title":{},"body":{"classes/Comment.html":{},"classes/Post.html":{},"classes/PostsArgs.html":{},"classes/User.html":{}}}],["field()@isnotempty",{"_index":498,"title":{},"body":{"classes/PostInput.html":{}}}],["field()@isnotempty()@minlength(10",{"_index":211,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{}}}],["field(type",{"_index":166,"title":{},"body":{"classes/Comment.html":{},"classes/Post.html":{},"classes/PostsArgs.html":{},"classes/User.html":{}}}],["field({nullable",{"_index":456,"title":{},"body":{"classes/Post.html":{},"classes/PostInput.html":{},"classes/User.html":{}}}],["field.resolve",{"_index":844,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["fieldmiddleware",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["fieldresolverenhancers",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["file",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":510,"title":{},"body":{"classes/PostRepository.html":{},"injectables/PostsService.html":{}}}],["findall(args",{"_index":770,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(q",{"_index":512,"title":{},"body":{"classes/PostRepository.html":{}}}],["findbyauthor",{"_index":511,"title":{},"body":{"classes/PostRepository.html":{},"injectables/PostsService.html":{}}}],["findbyauthor(id",{"_index":517,"title":{},"body":{"classes/PostRepository.html":{},"injectables/PostsService.html":{}}}],["findbyemail",{"_index":872,"title":{},"body":{"classes/UserRepository.html":{}}}],["findbyemail(email",{"_index":873,"title":{},"body":{"classes/UserRepository.html":{}}}],["findbyid",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":734,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":910,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyids(ids",{"_index":915,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbypostid",{"_index":223,"title":{},"body":{"classes/CommentRepository.html":{}}}],["findbypostid(id",{"_index":224,"title":{},"body":{"classes/CommentRepository.html":{}}}],["findcommentsbypostid",{"_index":761,"title":{},"body":{"injectables/PostsService.html":{}}}],["findcommentsbypostid(id",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{}}}],["findcommentsbypostids",{"_index":762,"title":{},"body":{"injectables/PostsService.html":{}}}],["findcommentsbypostids(ids",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{}}}],["first",{"_index":1018,"title":{},"body":{"index.html":{}}}],["float",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["forget",{"_index":579,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["formaterror",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":506,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["found.error",{"_index":717,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["found.error.ts",{"_index":502,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{},"coverage.html":{}}}],["found.error.ts:3",{"_index":504,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["from(result).pipe",{"_index":937,"title":{},"body":{"injectables/UsersService.html":{}}}],["from(this.commentrepository.findbypostid(id)).pipe",{"_index":812,"title":{},"body":{"injectables/PostsService.html":{}}}],["from(this.commentrepository.save(entity)).pipe",{"_index":818,"title":{},"body":{"injectables/PostsService.html":{}}}],["from(this.postrepository.findbyauthor(id)).pipe",{"_index":810,"title":{},"body":{"injectables/PostsService.html":{}}}],["from(this.postrepository.findone(id)).pipe",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{}}}],["from(this.userrepository.findone(id)).pipe",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["fully",{"_index":1024,"title":{},"body":{"index.html":{}}}],["function",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["function(...args",{"_index":845,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["functions",{"_index":1012,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":554,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["getallposts",{"_index":662,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getallposts(@args",{"_index":737,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getallposts(postsarg",{"_index":681,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getauthor",{"_index":663,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getauthor(@parent",{"_index":739,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getauthor(post",{"_index":685,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getconnectionoptions",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["getmany",{"_index":235,"title":{},"body":{"classes/CommentRepository.html":{},"classes/PostRepository.html":{}}}],["getpostbyid",{"_index":664,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getpostbyid(@args('postid",{"_index":732,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getpostbyid(id",{"_index":688,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getting",{"_index":1014,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":878,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getuserbyid(@args('userid",{"_index":899,"title":{},"body":{"classes/UsersResolver.html":{}}}],["getuserbyid(id",{"_index":882,"title":{},"body":{"classes/UsersResolver.html":{}}}],["github",{"_index":1033,"title":{},"body":{"index.html":{}}}],["given",{"_index":572,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["gql/gql",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["gql/types/post.model",{"_index":893,"title":{},"body":{"classes/UsersResolver.html":{}}}],["gql/types/user.model",{"_index":894,"title":{},"body":{"classes/UsersResolver.html":{}}}],["gqlapimodule",{"_index":9,"title":{"modules/GqlApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GqlApiModule.html":{},"modules.html":{},"overview.html":{}}}],["gqlargumentshost",{"_index":350,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlargumentshost.create(host",{"_index":357,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlexceptionfilter",{"_index":343,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqlexecutioncontext",{"_index":319,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":384,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["gqlexecutioncontext.create(context).getcontext",{"_index":337,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["gqlexecutioncontext.create(ctx).getcontext",{"_index":1085,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gqlhost",{"_index":356,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["gqluser",{"_index":701,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["graphql",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"classes/PostsResolver.html":{},"classes/UpperCaseDirective.html":{},"dependencies.html":{},"index.html":{}}}],["graphqlerror",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlfield",{"_index":838,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["graphqlformattederror",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlisodatetime",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlrequestlistener",{"_index":441,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["graphqlresolveinfo",{"_index":720,"title":{},"body":{"classes/PostsResolver.html":{}}}],["grapql",{"_index":558,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["guard",{"_index":303,"title":{"guards/HasPermissionsGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"guards/HasPermissionsGuard.html":{}}}],["handlerequest",{"_index":363,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":365,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hantsy",{"_index":597,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["hantsy2",{"_index":613,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["hantsy2@gmail.com",{"_index":612,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["hantsy@gmail.com",{"_index":596,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["has_permissions_key",{"_index":323,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermissions",{"_index":704,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["haspermissions(permissiontype.write_posts",{"_index":748,"title":{},"body":{"classes/PostsResolver.html":{}}}],["haspermissionsguard",{"_index":304,"title":{"guards/HasPermissionsGuard.html":{}},"body":{"guards/HasPermissionsGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["haspermissionsguard)@haspermissions(permissiontype.write_posts",{"_index":670,"title":{},"body":{"classes/PostsResolver.html":{}}}],["here",{"_index":376,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PostsDataInitializer.html":{}}}],["host",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{}}}],["httpexception",{"_index":346,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["httpexceptionfilter",{"_index":341,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["id",{"_index":158,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentRepository.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["identity",{"_index":1064,"title":{},"body":{"index.html":{}}}],["idp",{"_index":1022,"title":{},"body":{"index.html":{}}}],["ids",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["idx",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["ignoreenvfile",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":1038,"title":{},"body":{"index.html":{}}}],["implements",{"_index":251,"title":{},"body":{"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggingPlugin.html":{},"injectables/PostsDataInitializer.html":{}}}],["import",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{}}}],["in(ids",{"_index":816,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["including",{"_index":1016,"title":{},"body":{"index.html":{}}}],["index",{"_index":133,"title":{"index.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["info.returntype",{"_index":726,"title":{},"body":{"classes/PostsResolver.html":{}}}],["initializer",{"_index":242,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["initializer.ts",{"_index":546,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"coverage.html":{}}}],["initializer.ts:10",{"_index":563,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["initializer.ts:23",{"_index":552,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["initializer.ts:30",{"_index":553,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["inject",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":317,"title":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":360,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["inputtype",{"_index":214,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{}}}],["insert",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["insertresult",{"_index":920,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":1042,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1044,"title":{},"body":{"index.html":{}}}],["installsubscriptionhandlers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["instance",{"_index":573,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["int",{"_index":469,"title":{},"body":{"classes/Post.html":{},"classes/PostsArgs.html":{}}}],["int)@min(0",{"_index":534,"title":{},"body":{"classes/PostsArgs.html":{}}}],["int)@min(1)@max(50",{"_index":537,"title":{},"body":{"classes/PostsArgs.html":{}}}],["integer",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["interface",{"_index":126,"title":{"interfaces/AuthenticatedRequest.html":{},"interfaces/JwtPayload.html":{},"interfaces/UserPrincipal.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/JwtPayload.html":{},"interfaces/UserPrincipal.html":{},"coverage.html":{}}}],["interfaces",{"_index":128,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"interfaces/JwtPayload.html":{},"interfaces/UserPrincipal.html":{},"overview.html":{}}}],["into(userentity",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnotempty",{"_index":215,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{}}}],["issuer",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["it's",{"_index":574,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["jest",{"_index":1027,"title":{},"body":{"index.html":{}}}],["join",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["join(process.cwd",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["joincolumn",{"_index":196,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["json.stringify(e",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{}}}],["json.stringify(error",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["json.stringify(payload",{"_index":430,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["json.stringify(saved",{"_index":621,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["json.stringify(savedposts",{"_index":625,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["jwks",{"_index":407,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwksrequestsperminute",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksuri",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":152,"title":{},"body":{"modules/AuthzModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":148,"title":{},"body":{"modules/AuthzModule.html":{}}}],["jwtauthguard",{"_index":359,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"classes/PostsResolver.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtpayload",{"_index":391,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtstrategy",{"_index":142,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthzModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["keyword",{"_index":530,"title":{},"body":{"classes/PostsArgs.html":{}}}],["kind",{"_index":270,"title":{},"body":{"classes/DateScalar.html":{}}}],["kind.int",{"_index":278,"title":{},"body":{"classes/DateScalar.html":{}}}],["known/jwks.json",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["lastvaluefrom",{"_index":636,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["license",{"_index":1077,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":514,"title":{},"body":{"classes/PostRepository.html":{}}}],["literal",{"_index":918,"title":{},"body":{"injectables/UsersService.html":{}}}],["load",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["loadauthors",{"_index":628,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["loadcomments",{"_index":629,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["loggermiddleware",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["loggingplugin",{"_index":299,"title":{"classes/LoggingPlugin.html":{}},"body":{"modules/GqlApiModule.html":{},"classes/LoggingPlugin.html":{},"coverage.html":{}}}],["logic",{"_index":375,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["manager",{"_index":550,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["managing",{"_index":1063,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":197,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["manytoone((type",{"_index":206,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["manytoone(type",{"_index":187,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["map",{"_index":655,"title":{},"body":{"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["map((b",{"_index":907,"title":{},"body":{"classes/UsersResolver.html":{}}}],["map((c",{"_index":819,"title":{},"body":{"injectables/PostsService.html":{}}}],["map((comments",{"_index":648,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["map((e",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["map((entities",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{}}}],["map((r",{"_index":940,"title":{},"body":{"injectables/UsersService.html":{}}}],["map((ua",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["map((users",{"_index":638,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["map((usersmap",{"_index":641,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["map(users.map((user",{"_index":639,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["mapasmodel",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{}}}],["mapasmodel(e",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{}}}],["mapasmodelarray",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{}}}],["mapasmodelarray(entities",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{}}}],["matching",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":540,"title":{},"body":{"classes/PostsArgs.html":{}}}],["max(50",{"_index":544,"title":{},"body":{"classes/PostsArgs.html":{}}}],["memory",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/UpdateUserResult.html":{}}}],["metadata",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":222,"title":{},"body":{"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["mgr",{"_index":567,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["mgr.delete(commententity",{"_index":582,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["mgr.delete(postentity",{"_index":587,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["mgr.delete(userentity",{"_index":591,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["mgr.save(p",{"_index":608,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["mgr.save(user",{"_index":598,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["min",{"_index":541,"title":{},"body":{"classes/PostsArgs.html":{}}}],["min(0",{"_index":542,"title":{},"body":{"classes/PostsArgs.html":{}}}],["min(1",{"_index":543,"title":{},"body":{"classes/PostsArgs.html":{}}}],["minlength",{"_index":216,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{}}}],["minlength(10",{"_index":218,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{}}}],["miscellaneous",{"_index":1001,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":1028,"title":{},"body":{"index.html":{}}}],["mockito",{"_index":1031,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1049,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"modules.html":{},"overview.html":{}}}],["mutation",{"_index":693,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation((returns",{"_index":746,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["mutation(returns",{"_index":668,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["name",{"_index":204,"title":{},"body":{"entities/CommentEntity.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/PostEntity.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["name\"].map(key",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{}}}],["nestjs",{"_index":555,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"index.html":{}}}],["nestjs/common",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":318,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"dependencies.html":{}}}],["nestjs/core/helpers/execution",{"_index":370,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["nestjs/graphql",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"classes/Comment.html":{},"classes/CommentInput.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"classes/PostInput.html":{},"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"classes/UpdateUserResult.html":{},"classes/User.html":{},"classes/UsersResolver.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/passport",{"_index":145,"title":{},"body":{"modules/AuthzModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":980,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"dependencies.html":{}}}],["new",{"_index":272,"title":{},"body":{"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["next",{"_index":885,"title":{},"body":{"classes/UsersResolver.html":{}}}],["note",{"_index":568,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["nothing",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1043,"title":{},"body":{"index.html":{}}}],["null",{"_index":280,"title":{},"body":{"classes/DateScalar.html":{}}}],["nullable",{"_index":454,"title":{},"body":{"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/User.html":{},"entities/UserEntity.html":{}}}],["number",{"_index":266,"title":{},"body":{"classes/DateScalar.html":{},"classes/Post.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{}}}],["numberscalarmode",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["object.assign(await",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["object.assign(entity",{"_index":817,"title":{},"body":{"injectables/PostsService.html":{}}}],["object.assign(options",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["object.assign(p",{"_index":602,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["object.assign(user",{"_index":594,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["objecttype",{"_index":170,"title":{},"body":{"classes/Comment.html":{},"classes/Post.html":{},"classes/UpdateUserResult.html":{},"classes/User.html":{}}}],["observable",{"_index":316,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["of(p",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{}}}],["of(u",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["offset",{"_index":513,"title":{},"body":{"classes/PostRepository.html":{}}}],["onconflict(`(\"email",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["onetomany",{"_index":489,"title":{},"body":{"entities/PostEntity.html":{}}}],["onetomany((type",{"_index":492,"title":{},"body":{"entities/PostEntity.html":{},"entities/UserEntity.html":{}}}],["onetomany(type",{"_index":478,"title":{},"body":{"entities/PostEntity.html":{}}}],["onmoduleinit",{"_index":548,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["operations",{"_index":570,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["optional",{"_index":177,"title":{},"body":{"entities/CommentEntity.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["ormconfig.json",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["orupdate(['name",{"_index":935,"title":{},"body":{"injectables/UsersService.html":{}}}],["out",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"overview.html":{}}}],["overview",{"_index":1070,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":188,"title":{},"body":{"entities/CommentEntity.html":{},"injectables/JwtStrategy.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{}}}],["p.author",{"_index":603,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["p.comments",{"_index":207,"title":{},"body":{"entities/CommentEntity.html":{},"injectables/PostsDataInitializer.html":{}}}],["p.comments)@joincolumn({name",{"_index":189,"title":{},"body":{"entities/CommentEntity.html":{}}}],["p.content",{"_index":523,"title":{},"body":{"classes/PostRepository.html":{}}}],["package",{"_index":973,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":226,"title":{},"body":{"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UserNotFoundError.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":694,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["parsedinfo",{"_index":721,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseliteral",{"_index":254,"title":{},"body":{"classes/DateScalar.html":{}}}],["parseliteral(ast",{"_index":261,"title":{},"body":{"classes/DateScalar.html":{}}}],["parseresolveinfo(info",{"_index":722,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parseuuidpipe",{"_index":690,"title":{},"body":{"classes/PostsResolver.html":{}}}],["parsevalue",{"_index":255,"title":{},"body":{"classes/DateScalar.html":{}}}],["parsevalue(value",{"_index":265,"title":{},"body":{"classes/DateScalar.html":{}}}],["passport",{"_index":405,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passport/jwt",{"_index":1020,"title":{},"body":{"index.html":{}}}],["passportjwtsecret",{"_index":406,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":144,"title":{},"body":{"modules/AuthzModule.html":{}}}],["passportmodule.register",{"_index":150,"title":{},"body":{"modules/AuthzModule.html":{}}}],["passportstrategy",{"_index":402,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["payload",{"_index":401,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":433,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":392,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["payload.name",{"_index":434,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.permissions.map((p",{"_index":435,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":432,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["perform",{"_index":569,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["permission",{"_index":326,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPrincipal.html":{}}}],["permissions",{"_index":336,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/UserPrincipal.html":{},"miscellaneous/variables.html":{}}}],["permissions.decorator",{"_index":706,"title":{},"body":{"classes/PostsResolver.html":{}}}],["permissions.decorator.ts",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["permissions.guard",{"_index":707,"title":{},"body":{"classes/PostsResolver.html":{}}}],["permissions.guard.ts",{"_index":306,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"coverage.html":{}}}],["permissions.guard.ts:10",{"_index":311,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["permissions.guard.ts:12",{"_index":314,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["permissions.some((r",{"_index":339,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["permissiontype",{"_index":325,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostsResolver.html":{},"interfaces/UserPrincipal.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["pg",{"_index":991,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":754,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["pipe(map((e",{"_index":809,"title":{},"body":{"injectables/PostsService.html":{}}}],["pipe(throwifempty",{"_index":735,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["playgroud",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["playground",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin",{"_index":440,"title":{},"body":{"classes/LoggingPlugin.html":{},"dependencies.html":{}}}],["plugins/logging.plugin",{"_index":300,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["port",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":159,"title":{"classes/Post.html":{}},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/Post.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["post)@useguards(jwtauthguard",{"_index":679,"title":{},"body":{"classes/PostsResolver.html":{}}}],["post.author",{"_index":476,"title":{},"body":{"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{},"entities/UserEntity.html":{}}}],["post.comments",{"_index":616,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["post.content",{"_index":610,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["post.entity",{"_index":201,"title":{},"body":{"entities/CommentEntity.html":{}}}],["post.model",{"_index":171,"title":{},"body":{"classes/Comment.html":{},"classes/User.html":{}}}],["post.title",{"_index":609,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["post_id",{"_index":190,"title":{},"body":{"entities/CommentEntity.html":{}}}],["post_not_found",{"_index":507,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["postentity",{"_index":186,"title":{"entities/PostEntity.html":{}},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{},"entities/UserEntity.html":{},"coverage.html":{}}}],["postgres",{"_index":561,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"index.html":{}}}],["postid",{"_index":160,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/PostNotFoundError.html":{},"injectables/PostsLoaders.html":{},"injectables/PostsService.html":{},"classes/UserNotFoundError.html":{}}}],["postids",{"_index":646,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["postids.map((postid",{"_index":649,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["postinput",{"_index":494,"title":{"classes/PostInput.html":{}},"body":{"classes/PostInput.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfounderror",{"_index":500,"title":{"classes/PostNotFoundError.html":{}},"body":{"classes/PostNotFoundError.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postnotfounderror(id",{"_index":736,"title":{},"body":{"classes/PostsResolver.html":{}}}],["postrepository",{"_index":244,"title":{"classes/PostRepository.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["posts",{"_index":240,"title":{},"body":{"modules/DatabaseModule.html":{},"entities/PostEntity.html":{},"classes/PostsResolver.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UsersResolver.html":{}}}],["posts(@parent",{"_index":902,"title":{},"body":{"classes/UsersResolver.html":{}}}],["posts(user",{"_index":888,"title":{},"body":{"classes/UsersResolver.html":{}}}],["posts.items",{"_index":730,"title":{},"body":{"classes/PostsResolver.html":{}}}],["postsarg",{"_index":684,"title":{},"body":{"classes/PostsResolver.html":{}}}],["postsargs",{"_index":528,"title":{"classes/PostsArgs.html":{}},"body":{"classes/PostsArgs.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postsdatainitializer",{"_index":238,"title":{"injectables/PostsDataInitializer.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/PostsDataInitializer.html":{},"coverage.html":{},"overview.html":{}}}],["postservice",{"_index":632,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["postsloaders",{"_index":284,"title":{"injectables/PostsLoaders.html":{}},"body":{"modules/GqlApiModule.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"coverage.html":{},"overview.html":{}}}],["postsresolver",{"_index":289,"title":{"classes/PostsResolver.html":{}},"body":{"modules/GqlApiModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postsservice",{"_index":285,"title":{"injectables/PostsService.html":{}},"body":{"modules/GqlApiModule.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"overview.html":{}}}],["primarycolumn",{"_index":863,"title":{},"body":{"entities/UserEntity.html":{}}}],["primarycolumn('varchar",{"_index":859,"title":{},"body":{"entities/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":199,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":184,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["principal.interface",{"_index":138,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/JwtStrategy.html":{},"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["principal.interface.ts",{"_index":870,"title":{},"body":{"interfaces/UserPrincipal.html":{},"coverage.html":{}}}],["private",{"_index":547,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{}}}],["production",{"_index":1051,"title":{},"body":{"index.html":{}}}],["project",{"_index":556,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"index.html":{}}}],["promise",{"_index":228,"title":{},"body":{"classes/CommentRepository.html":{},"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"classes/LoggingPlugin.html":{},"entities/PostEntity.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"entities/UserEntity.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":599,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["promise.resolve([c",{"_index":607,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["promise.resolve([comment",{"_index":617,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["properties",{"_index":134,"title":{"properties.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/DateScalar.html":{},"interfaces/JwtPayload.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/UpdateUserResult.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"properties.html":{}}}],["provide",{"_index":301,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["providers",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{}}}],["public",{"_index":627,"title":{},"body":{"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["pubsub",{"_index":292,"title":{},"body":{"modules/GqlApiModule.html":{},"classes/PostsResolver.html":{}}}],["q",{"_index":516,"title":{},"body":{"classes/PostRepository.html":{}}}],["query",{"_index":695,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{},"index.html":{}}}],["query((returns",{"_index":731,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["query(returns",{"_index":682,"title":{},"body":{"classes/PostsResolver.html":{}}}],["r.raw",{"_index":941,"title":{},"body":{"injectables/UsersService.html":{}}}],["ratelimit",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["read:posts",{"_index":1007,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["read_posts",{"_index":1006,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["readonly",{"_index":139,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"guards/HasPermissionsGuard.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":993,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":310,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["relationid",{"_index":198,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["relationid((comment",{"_index":208,"title":{},"body":{"entities/CommentEntity.html":{}}}],["relationid((post",{"_index":493,"title":{},"body":{"entities/PostEntity.html":{}}}],["relationid(comment",{"_index":192,"title":{},"body":{"entities/CommentEntity.html":{}}}],["relationid(post",{"_index":475,"title":{},"body":{"entities/PostEntity.html":{}}}],["relations",{"_index":624,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["removed",{"_index":884,"title":{},"body":{"classes/UsersResolver.html":{}}}],["report",{"_index":1036,"title":{},"body":{"index.html":{}}}],["repository",{"_index":221,"title":{},"body":{"classes/CommentRepository.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/UserRepository.html":{}}}],["repository/comment.repository",{"_index":243,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["repository/post.repository",{"_index":245,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/PostsDataInitializer.html":{}}}],["repository/user.repository",{"_index":247,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["req",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["req?.user",{"_index":1086,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":132,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{}}}],["request.interface",{"_index":322,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["request.interface.ts",{"_index":130,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"coverage.html":{}}}],["requestdidstart",{"_index":438,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["requires",{"_index":335,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["res",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"overview.html":{}}}],["resolve",{"_index":843,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["resolve.apply(this",{"_index":847,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["resolvefield",{"_index":696,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolvefield('author",{"_index":686,"title":{},"body":{"classes/PostsResolver.html":{}}}],["resolvefield((of",{"_index":742,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolvefield(of",{"_index":676,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolver",{"_index":697,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolver((of",{"_index":719,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["resolvers/posts.resolver",{"_index":290,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["resolvers/users.resolver",{"_index":295,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["resolvetree",{"_index":723,"title":{},"body":{"classes/PostsResolver.html":{}}}],["response",{"_index":448,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["result",{"_index":846,"title":{},"body":{"classes/UpperCaseDirective.html":{},"injectables/UsersService.html":{}}}],["result.model",{"_index":896,"title":{},"body":{"classes/UsersResolver.html":{}}}],["result.model.ts",{"_index":829,"title":{},"body":{"classes/UpdateUserResult.html":{},"coverage.html":{}}}],["result.model.ts:6",{"_index":832,"title":{},"body":{"classes/UpdateUserResult.html":{}}}],["result.model.ts:9",{"_index":831,"title":{},"body":{"classes/UpdateUserResult.html":{}}}],["result.touppercase",{"_index":849,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["results",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/PostRepository.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":227,"title":{},"body":{"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpperCaseDirective.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["roles",{"_index":1065,"title":{},"body":{"index.html":{}}}],["routepermissions",{"_index":329,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["routepermissions.includes(r",{"_index":340,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["routepermissions.length",{"_index":332,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["rs256",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["rsa",{"_index":408,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":1046,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":320,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":656,"title":{},"body":{"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["sample",{"_index":1015,"title":{},"body":{"index.html":{}}}],["saved",{"_index":618,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["savedposts",{"_index":622,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["scalar",{"_index":259,"title":{},"body":{"classes/DateScalar.html":{}}}],["scalar('date",{"_index":271,"title":{},"body":{"classes/DateScalar.html":{}}}],["scalars/date.scalar",{"_index":298,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["schemadirectives",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["schemadirectivevisitor",{"_index":835,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["scope",{"_index":653,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["scope.request",{"_index":657,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["secretorkeyprovider",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1061,"title":{},"body":{"index.html":{}}}],["send",{"_index":447,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["sent",{"_index":276,"title":{},"body":{"classes/DateScalar.html":{}}}],["serialize",{"_index":256,"title":{},"body":{"classes/DateScalar.html":{}}}],["serialize(value",{"_index":268,"title":{},"body":{"classes/DateScalar.html":{}}}],["server",{"_index":353,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"classes/LoggingPlugin.html":{},"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{},"dependencies.html":{}}}],["service",{"_index":1023,"title":{},"body":{"index.html":{}}}],["service/posts.service",{"_index":291,"title":{},"body":{"modules/GqlApiModule.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["service/users.service",{"_index":296,"title":{},"body":{"modules/GqlApiModule.html":{},"injectables/PostsLoaders.html":{},"classes/UsersResolver.html":{}}}],["session",{"_index":381,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["set",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["setmetadata(has_permissions_key",{"_index":1087,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setparameter('id",{"_index":234,"title":{},"body":{"classes/CommentRepository.html":{}}}],["setparameter('q",{"_index":524,"title":{},"body":{"classes/PostRepository.html":{}}}],["show",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["simplifiedinfo",{"_index":724,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifiedinfo.fields",{"_index":727,"title":{},"body":{"classes/PostsResolver.html":{}}}],["simplifyparsedresolveinfofragmentwithtype",{"_index":725,"title":{},"body":{"classes/PostsResolver.html":{}}}],["skip",{"_index":531,"title":{},"body":{"classes/PostsArgs.html":{}}}],["skip(offset",{"_index":525,"title":{},"body":{"classes/PostRepository.html":{}}}],["sortschema",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"modules/AuthzModule.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"modules/DatabaseModule.html":{},"classes/DateScalar.html":{},"modules/GqlApiModule.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggingPlugin.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{}}}],["special",{"_index":575,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["src/.../authz.constants.ts",{"_index":1081,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../gql",{"_index":1080,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../has",{"_index":1082,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1013,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../permission",{"_index":1003,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":16,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authz/authenticated",{"_index":129,"title":{},"body":{"interfaces/AuthenticatedRequest.html":{},"coverage.html":{}}}],["src/authz/authz.constants.ts",{"_index":957,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authz/authz.module.ts",{"_index":143,"title":{},"body":{"modules/AuthzModule.html":{}}}],["src/authz/gql",{"_index":960,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authz/has",{"_index":305,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authz/jwt",{"_index":361,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/authz/jwt.strategy.ts",{"_index":395,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authz/jwt.strategy.ts:15",{"_index":398,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authz/jwt.strategy.ts:32",{"_index":400,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authz/permission",{"_index":1005,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/authz/user",{"_index":869,"title":{},"body":{"interfaces/UserPrincipal.html":{},"coverage.html":{}}}],["src/database/database.module.ts",{"_index":239,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/entity/comment.entity.ts",{"_index":175,"title":{},"body":{"entities/CommentEntity.html":{},"coverage.html":{}}}],["src/database/entity/comment.entity.ts:16",{"_index":185,"title":{},"body":{"entities/CommentEntity.html":{}}}],["src/database/entity/comment.entity.ts:19",{"_index":179,"title":{},"body":{"entities/CommentEntity.html":{}}}],["src/database/entity/comment.entity.ts:23",{"_index":191,"title":{},"body":{"entities/CommentEntity.html":{}}}],["src/database/entity/comment.entity.ts:26",{"_index":194,"title":{},"body":{"entities/CommentEntity.html":{}}}],["src/database/entity/comment.entity.ts:29",{"_index":183,"title":{},"body":{"entities/CommentEntity.html":{}}}],["src/database/entity/post.entity.ts",{"_index":471,"title":{},"body":{"entities/PostEntity.html":{},"coverage.html":{}}}],["src/database/entity/post.entity.ts:18",{"_index":484,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:21",{"_index":485,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:24",{"_index":482,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:29",{"_index":480,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:33",{"_index":474,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:36",{"_index":477,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:39",{"_index":483,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/post.entity.ts:42",{"_index":488,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/database/entity/user.entity.ts",{"_index":855,"title":{},"body":{"entities/UserEntity.html":{},"coverage.html":{}}}],["src/database/entity/user.entity.ts:11",{"_index":858,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/database/entity/user.entity.ts:14",{"_index":862,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/database/entity/user.entity.ts:8",{"_index":860,"title":{},"body":{"entities/UserEntity.html":{}}}],["src/database/posts",{"_index":545,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"coverage.html":{}}}],["src/database/repository/comment.repository.ts",{"_index":220,"title":{},"body":{"classes/CommentRepository.html":{},"coverage.html":{}}}],["src/database/repository/comment.repository.ts:7",{"_index":225,"title":{},"body":{"classes/CommentRepository.html":{}}}],["src/database/repository/post.repository.ts",{"_index":509,"title":{},"body":{"classes/PostRepository.html":{},"coverage.html":{}}}],["src/database/repository/post.repository.ts:15",{"_index":518,"title":{},"body":{"classes/PostRepository.html":{}}}],["src/database/repository/post.repository.ts:6",{"_index":515,"title":{},"body":{"classes/PostRepository.html":{}}}],["src/database/repository/user.repository.ts",{"_index":871,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/database/repository/user.repository.ts:6",{"_index":874,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/gql/dataloaders/posts.loaders.ts",{"_index":626,"title":{},"body":{"injectables/PostsLoaders.html":{},"coverage.html":{}}}],["src/gql/dataloaders/posts.loaders.ts:15",{"_index":644,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/gql/dataloaders/posts.loaders.ts:27",{"_index":652,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/gql/dataloaders/posts.loaders.ts:9",{"_index":631,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["src/gql/directives/upper",{"_index":833,"title":{},"body":{"classes/UpperCaseDirective.html":{},"coverage.html":{}}}],["src/gql/dto/comment.input.ts",{"_index":210,"title":{},"body":{"classes/CommentInput.html":{},"coverage.html":{}}}],["src/gql/dto/comment.input.ts:12",{"_index":212,"title":{},"body":{"classes/CommentInput.html":{}}}],["src/gql/dto/comment.input.ts:7",{"_index":213,"title":{},"body":{"classes/CommentInput.html":{}}}],["src/gql/dto/post.input.ts",{"_index":495,"title":{},"body":{"classes/PostInput.html":{},"coverage.html":{}}}],["src/gql/dto/post.input.ts:11",{"_index":499,"title":{},"body":{"classes/PostInput.html":{}}}],["src/gql/dto/post.input.ts:16",{"_index":496,"title":{},"body":{"classes/PostInput.html":{}}}],["src/gql/dto/post.input.ts:7",{"_index":497,"title":{},"body":{"classes/PostInput.html":{}}}],["src/gql/dto/posts.arg.ts",{"_index":529,"title":{},"body":{"classes/PostsArgs.html":{},"coverage.html":{}}}],["src/gql/dto/posts.arg.ts:11",{"_index":535,"title":{},"body":{"classes/PostsArgs.html":{}}}],["src/gql/dto/posts.arg.ts:16",{"_index":538,"title":{},"body":{"classes/PostsArgs.html":{}}}],["src/gql/dto/posts.arg.ts:7",{"_index":533,"title":{},"body":{"classes/PostsArgs.html":{}}}],["src/gql/filters/http.exception.filter.ts",{"_index":342,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/gql/filters/http.exception.filter.ts:7",{"_index":348,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/gql/gql",{"_index":287,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["src/gql/plugins/logging.plugin.ts",{"_index":436,"title":{},"body":{"classes/LoggingPlugin.html":{},"coverage.html":{}}}],["src/gql/plugins/logging.plugin.ts:9",{"_index":439,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["src/gql/resolvers/post",{"_index":501,"title":{},"body":{"classes/PostNotFoundError.html":{},"coverage.html":{}}}],["src/gql/resolvers/posts.resolver.ts",{"_index":658,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{}}}],["src/gql/resolvers/posts.resolver.ts:108",{"_index":674,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:31",{"_index":666,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:56",{"_index":689,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:63",{"_index":683,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:68",{"_index":687,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:80",{"_index":677,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:87",{"_index":680,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/posts.resolver.ts:97",{"_index":671,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/gql/resolvers/user",{"_index":867,"title":{},"body":{"classes/UserNotFoundError.html":{},"coverage.html":{}}}],["src/gql/resolvers/users.resolver.ts",{"_index":877,"title":{},"body":{"classes/UsersResolver.html":{},"coverage.html":{}}}],["src/gql/resolvers/users.resolver.ts:24",{"_index":881,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/gql/resolvers/users.resolver.ts:34",{"_index":887,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/gql/resolvers/users.resolver.ts:41",{"_index":889,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/gql/resolvers/users.resolver.ts:47",{"_index":892,"title":{},"body":{"classes/UsersResolver.html":{}}}],["src/gql/scalars/date.scalar.ts",{"_index":250,"title":{},"body":{"classes/DateScalar.html":{},"coverage.html":{}}}],["src/gql/scalars/date.scalar.ts:12",{"_index":269,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/gql/scalars/date.scalar.ts:16",{"_index":263,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/gql/scalars/date.scalar.ts:6",{"_index":260,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/gql/scalars/date.scalar.ts:8",{"_index":267,"title":{},"body":{"classes/DateScalar.html":{}}}],["src/gql/service/posts.service.ts",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/gql/service/posts.service.ts:106",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:16",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:22",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:29",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:39",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:52",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:58",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:68",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:82",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/posts.service.ts:95",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/gql/service/users.service.ts",{"_index":909,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/gql/service/users.service.ts:12",{"_index":913,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/gql/service/users.service.ts:15",{"_index":919,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/gql/service/users.service.ts:38",{"_index":914,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/gql/service/users.service.ts:51",{"_index":916,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/gql/types/comment.model.ts",{"_index":156,"title":{},"body":{"classes/Comment.html":{},"coverage.html":{}}}],["src/gql/types/comment.model.ts:10",{"_index":165,"title":{},"body":{"classes/Comment.html":{}}}],["src/gql/types/comment.model.ts:13",{"_index":169,"title":{},"body":{"classes/Comment.html":{}}}],["src/gql/types/comment.model.ts:16",{"_index":168,"title":{},"body":{"classes/Comment.html":{}}}],["src/gql/types/comment.model.ts:7",{"_index":167,"title":{},"body":{"classes/Comment.html":{}}}],["src/gql/types/post.model.ts",{"_index":449,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/gql/types/post.model.ts:24",{"_index":461,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:28",{"_index":463,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:31",{"_index":459,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:34",{"_index":460,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:37",{"_index":464,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:40",{"_index":458,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:43",{"_index":455,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/post.model.ts:46",{"_index":457,"title":{},"body":{"classes/Post.html":{}}}],["src/gql/types/update",{"_index":828,"title":{},"body":{"classes/UpdateUserResult.html":{},"coverage.html":{}}}],["src/gql/types/user.model.ts",{"_index":850,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/gql/types/user.model.ts:10",{"_index":853,"title":{},"body":{"classes/User.html":{}}}],["src/gql/types/user.model.ts:13",{"_index":851,"title":{},"body":{"classes/User.html":{}}}],["src/gql/types/user.model.ts:16",{"_index":854,"title":{},"body":{"classes/User.html":{}}}],["src/gql/types/user.model.ts:7",{"_index":852,"title":{},"body":{"classes/User.html":{}}}],["src/main.ts",{"_index":968,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/schema.gql",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":1047,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1050,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1052,"title":{},"body":{"index.html":{}}}],["started",{"_index":444,"title":{"index.html":{}},"body":{"classes/LoggingPlugin.html":{}}}],["statements",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":404,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":161,"title":{},"body":{"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"interfaces/JwtPayload.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":394,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["subscription",{"_index":698,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscription((returns",{"_index":757,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscription(returns",{"_index":672,"title":{},"body":{"classes/PostsResolver.html":{}}}],["subscriptions",{"_index":293,"title":{},"body":{"modules/GqlApiModule.html":{},"classes/PostsResolver.html":{},"dependencies.html":{}}}],["success",{"_index":830,"title":{},"body":{"classes/UpdateUserResult.html":{},"classes/UsersResolver.html":{}}}],["super",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super('post",{"_index":505,"title":{},"body":{"classes/PostNotFoundError.html":{}}}],["super('user",{"_index":868,"title":{},"body":{"classes/UserNotFoundError.html":{}}}],["super.canactivate(context",{"_index":382,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.canactivate(new",{"_index":386,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.login(request",{"_index":379,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1067,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1068,"title":{},"body":{"modules.html":{}}}],["switchmap",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["switchmap((p",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{}}}],["switchmap((u",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["synchronize",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":532,"title":{},"body":{"classes/PostsArgs.html":{}}}],["take(limit",{"_index":526,"title":{},"body":{"classes/PostRepository.html":{}}}],["tap",{"_index":699,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["tap((c",{"_index":755,"title":{},"body":{"classes/PostsResolver.html":{}}}],["tap((e",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["tap((r",{"_index":938,"title":{},"body":{"injectables/UsersService.html":{}}}],["test",{"_index":606,"title":{},"body":{"injectables/PostsDataInitializer.html":{},"index.html":{}}}],["test:covresources",{"_index":1057,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1056,"title":{},"body":{"index.html":{}}}],["test@id",{"_index":595,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["test@id2",{"_index":611,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["testing",{"_index":1025,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1054,"title":{},"body":{"index.html":{}}}],["things",{"_index":580,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.commentrepository.find",{"_index":815,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.createquerybuilder('comment",{"_index":232,"title":{},"body":{"classes/CommentRepository.html":{}}}],["this.createquerybuilder('p",{"_index":521,"title":{},"body":{"classes/PostRepository.html":{}}}],["this.data.map(async",{"_index":600,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.findone",{"_index":876,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.manager.find(postentity",{"_index":527,"title":{},"body":{"classes/PostRepository.html":{}}}],["this.manager.save(user",{"_index":614,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.manager.transaction(async",{"_index":566,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.mapasmodel(e",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.mapasmodelarray(e",{"_index":811,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.mapasmodelarray(entities",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postid",{"_index":508,"title":{},"body":{"classes/PostNotFoundError.html":{},"classes/UserNotFoundError.html":{}}}],["this.postrepository.find",{"_index":623,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.postrepository.findall(args.keyword",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(post",{"_index":619,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["this.postservice.findcommentsbypostids(postids).pipe",{"_index":647,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["this.postsloaders.loadauthors.load(authorid",{"_index":741,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsloaders.loadcomments.load(post.id",{"_index":745,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice",{"_index":733,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.createpost(user.userid",{"_index":750,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.findall(postsarg",{"_index":738,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.findbyauthor(user.id",{"_index":903,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.postsservice.findcommentsofpost(post.id",{"_index":744,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getposts",{"_index":729,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostswithauthors",{"_index":728,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.asynciterator('commentadded",{"_index":758,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.pubsub.publish('commentadded",{"_index":756,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.reflector.get",{"_index":330,"title":{},"body":{"guards/HasPermissionsGuard.html":{}}}],["this.userrepository",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice",{"_index":900,"title":{},"body":{"classes/UsersResolver.html":{}}}],["this.usersservice.findbyids(authorids).pipe",{"_index":637,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["this.usersservice.update",{"_index":906,"title":{},"body":{"classes/UsersResolver.html":{}}}],["throw",{"_index":388,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["throwifempty",{"_index":700,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["timestamp",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["title",{"_index":452,"title":{},"body":{"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{}}}],["tools/utils",{"_index":841,"title":{},"body":{"classes/UpperCaseDirective.html":{},"dependencies.html":{}}}],["transaction",{"_index":577,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["transformer",{"_index":984,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"guards/HasPermissionsGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/User.html":{},"entities/UserEntity.html":{}}}],["true})@joincolumn({name",{"_index":472,"title":{},"body":{"entities/PostEntity.html":{}}}],["ts",{"_index":1030,"title":{},"body":{"index.html":{}}}],["tsuml2",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedRequest.html":{},"classes/Comment.html":{},"entities/CommentEntity.html":{},"classes/CommentInput.html":{},"classes/CommentRepository.html":{},"classes/DateScalar.html":{},"guards/HasPermissionsGuard.html":{},"classes/HttpExceptionFilter.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"entities/PostEntity.html":{},"classes/PostInput.html":{},"classes/PostNotFoundError.html":{},"classes/PostRepository.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"classes/UpdateUserResult.html":{},"classes/UpperCaseDirective.html":{},"classes/User.html":{},"entities/UserEntity.html":{},"classes/UserNotFoundError.html":{},"interfaces/UserPrincipal.html":{},"classes/UserRepository.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":327,"title":{},"body":{"guards/HasPermissionsGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PostsResolver.html":{},"interfaces/UserPrincipal.html":{}}}],["type.enum.ts",{"_index":1004,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeof",{"_index":848,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["typeorm",{"_index":200,"title":{},"body":{"entities/CommentEntity.html":{},"classes/CommentRepository.html":{},"entities/PostEntity.html":{},"classes/PostRepository.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsService.html":{},"entities/UserEntity.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["typeormmodule",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["typeormmodule.forfeature",{"_index":248,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmodule.forrootasync",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["types/comment.model",{"_index":715,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["types/post.model",{"_index":716,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["types/update",{"_index":895,"title":{},"body":{"classes/UsersResolver.html":{}}}],["types/user.model",{"_index":718,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/UsersService.html":{}}}],["u",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["ua.map((u",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorizedexception",{"_index":368,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["undefined",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{}}}],["unique",{"_index":856,"title":{},"body":{"entities/UserEntity.html":{}}}],["unit",{"_index":1053,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1084,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1078,"title":{},"body":{"properties.html":{}}}],["update",{"_index":911,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(user",{"_index":917,"title":{},"body":{"injectables/UsersService.html":{}}}],["updated_at",{"_index":487,"title":{},"body":{"entities/PostEntity.html":{}}}],["updatedat",{"_index":453,"title":{},"body":{"classes/Post.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{}}}],["updatedatecolumn",{"_index":490,"title":{},"body":{"entities/PostEntity.html":{}}}],["updatedatecolumn({name",{"_index":486,"title":{},"body":{"entities/PostEntity.html":{}}}],["updatestr",{"_index":923,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser",{"_index":879,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuser(@gqluser",{"_index":904,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuser(user",{"_index":890,"title":{},"body":{"classes/UsersResolver.html":{}}}],["updateuserresult",{"_index":827,"title":{"classes/UpdateUserResult.html":{}},"body":{"classes/UpdateUserResult.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["updateuserresult)@useguards(jwtauthguard",{"_index":891,"title":{},"body":{"classes/UsersResolver.html":{}}}],["upper",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["uppercasedirective",{"_index":105,"title":{"classes/UpperCaseDirective.html":{}},"body":{"modules/AppModule.html":{},"classes/UpperCaseDirective.html":{},"coverage.html":{}}}],["url",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":691,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["useguards(jwtauthguard",{"_index":747,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["user",{"_index":135,"title":{"classes/User.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"guards/HasPermissionsGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Post.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"classes/PostsResolver.html":{},"classes/User.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.decorator",{"_index":703,"title":{},"body":{"classes/PostsResolver.html":{},"classes/UsersResolver.html":{}}}],["user.decorator.ts",{"_index":961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.entity",{"_index":203,"title":{},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{}}}],["user.id",{"_index":640,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["user.model",{"_index":466,"title":{},"body":{"classes/Post.html":{}}}],["userdel",{"_index":590,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["userdel.affected",{"_index":593,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["userentity",{"_index":202,"title":{"entities/UserEntity.html":{}},"body":{"entities/CommentEntity.html":{},"entities/PostEntity.html":{},"injectables/PostsDataInitializer.html":{},"entities/UserEntity.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":431,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/UserPrincipal.html":{},"classes/UsersResolver.html":{}}}],["username",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["usernotfounderror",{"_index":866,"title":{"classes/UserNotFoundError.html":{}},"body":{"classes/UserNotFoundError.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["usernotfounderror(id",{"_index":901,"title":{},"body":{"classes/UsersResolver.html":{}}}],["userprincipal",{"_index":136,"title":{"interfaces/UserPrincipal.html":{}},"body":{"interfaces/AuthenticatedRequest.html":{},"injectables/JwtStrategy.html":{},"classes/PostsResolver.html":{},"interfaces/UserPrincipal.html":{},"classes/UsersResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":246,"title":{"classes/UserRepository.html":{}},"body":{"modules/DatabaseModule.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":864,"title":{},"body":{"entities/UserEntity.html":{}}}],["usersmap.get(authorid",{"_index":643,"title":{},"body":{"injectables/PostsLoaders.html":{}}}],["usersresolver",{"_index":294,"title":{"classes/UsersResolver.html":{}},"body":{"modules/GqlApiModule.html":{},"classes/UsersResolver.html":{},"coverage.html":{}}}],["usersservice",{"_index":286,"title":{"injectables/UsersService.html":{}},"body":{"modules/GqlApiModule.html":{},"injectables/PostsLoaders.html":{},"classes/UsersResolver.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":302,"title":{},"body":{"modules/GqlApiModule.html":{}}}],["using",{"_index":571,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["validate",{"_index":396,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":399,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":217,"title":{},"body":{"classes/CommentInput.html":{},"classes/PostInput.html":{},"classes/PostsArgs.html":{},"dependencies.html":{}}}],["value",{"_index":257,"title":{},"body":{"classes/DateScalar.html":{},"classes/PostsArgs.html":{},"injectables/PostsDataInitializer.html":{},"injectables/PostsLoaders.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.gettime",{"_index":275,"title":{},"body":{"classes/DateScalar.html":{}}}],["valuenode",{"_index":262,"title":{},"body":{"classes/DateScalar.html":{}}}],["values(user",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["variable",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1079,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":898,"title":{},"body":{"classes/UsersResolver.html":{},"properties.html":{}}}],["version\")')@query(returns",{"_index":886,"title":{},"body":{"classes/UsersResolver.html":{}}}],["via",{"_index":562,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["visitfielddefinition",{"_index":836,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["visitfielddefinition(field",{"_index":837,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["void",{"_index":840,"title":{},"body":{"classes/UpperCaseDirective.html":{}}}],["watch",{"_index":1048,"title":{},"body":{"index.html":{}}}],["where('comment.post.id=:id",{"_index":233,"title":{},"body":{"classes/CommentRepository.html":{}}}],["where('p.title",{"_index":522,"title":{},"body":{"classes/PostRepository.html":{}}}],["willsendresponse",{"_index":445,"title":{},"body":{"classes/LoggingPlugin.html":{}}}],["working",{"_index":576,"title":{},"body":{"injectables/PostsDataInitializer.html":{}}}],["write:posts",{"_index":1009,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["write_posts",{"_index":1008,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["zoom",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthzModule.html":{},"modules/DatabaseModule.html":{},"modules/GqlApiModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthzModule\n\nAuthzModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthzModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nGqlApiModule\n\nGqlApiModule\n\nAppModule -->\n\nGqlApiModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthzModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            GqlApiModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigType } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GraphQLError, GraphQLFormattedError } from 'graphql';\nimport { join } from 'path';\nimport { AuthzModule } from './authz/authz.module';\nimport dbConfig from './config/db.config';\nimport { DatabaseModule } from './database/database.module';\nimport { GqlApiModule } from './gql/gql-api.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ ignoreEnvFile: true }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule.forFeature(dbConfig)],\n      useFactory: async (cfg: ConfigType) =>\n        // getConnectionOptions is used to load config from ormconfig.json file.\n        //\n        // Object.assign(await getConnectionOptions(), {\n        //   autoLoadEntities: true,\n        //   logging: true,\n        // }),\n\n        {\n          const options = Boolean(cfg.url)\n            ? {\n                type: cfg.type,\n                url: cfg.url,\n              }\n            : {\n                type: cfg.type,\n                host: cfg.host,\n                port: cfg.port,\n                database: cfg.database,\n                username: cfg.username,\n                password: cfg.password,\n              };\n\n          return Object.assign(options, {\n            entities: ['dist/**/*.entity{.ts,.js}'],\n            autoLoadEntities: true,\n            synchronize: true,\n            logging: true,\n          }) as any;\n        },\n\n      inject: [dbConfig.KEY],\n    }),\n    GraphQLModule.forRoot({\n      installSubscriptionHandlers: true,\n      debug: true,\n      playground: true, //show playgroud\n      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),\n      // in memory\n      //autoSchemaFile: true,\n      sortSchema: true,\n      buildSchemaOptions: {\n        //fieldMiddleware: [loggerMiddleware],\n        //dateScalarMode: 'timestamp', // by default, GraphQLISODateTime (e.g. 2019-12-03T09:54:33Z)\n        numberScalarMode: 'integer', //default, it is float.\n      },\n      schemaDirectives: {\n        //upper: UpperCaseDirective,\n      },\n      // fieldResolverEnhancers: ['guards'],\n      context: ({ req, res }) => ({\n        req,\n        res,\n        //batchAuthorsLoader: batchAuthorsLoader(usersService),\n      }),\n      formatError: (error: GraphQLError) => {\n        //console.log('GraphQLError::', JSON.stringify(error));\n        const graphQLFormattedError: GraphQLFormattedError = {\n          message:\n            error?.extensions?.exception?.message || error?.message || '',\n        };\n        return graphQLFormattedError;\n      },\n    }),\n    DatabaseModule,\n    AuthzModule,\n    GqlApiModule,\n  ],\n  providers: [],\n  controllers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedRequest.html":{"url":"interfaces/AuthenticatedRequest.html","title":"interface - AuthenticatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authz/authenticated-request.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         UserPrincipal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UserPrincipal\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { UserPrincipal } from './user-principal.interface';\nexport interface AuthenticatedRequest extends Request {\n  readonly user: UserPrincipal;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthzModule.html":{"url":"modules/AuthzModule.html","title":"module - AuthzModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthzModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthzModule\n\n\n\ncluster_AuthzModule_providers\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\n\n\nAuthzModule\n\nAuthzModule\n\nAuthzModule -->\n\nJwtStrategy->AuthzModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authz/authz.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PassportModule } from '@nestjs/passport';\nimport auth0Config from '../config/auth0.config';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    ConfigModule.forFeature(auth0Config),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  providers: [JwtStrategy],\n  exports: [PassportModule],\n})\nexport class AuthzModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Comment.html":{"url":"classes/Comment.html","title":"class - Comment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/types/comment.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/comment.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/comment.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/comment.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/comment.model.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Post } from './post.model';\n\n@ObjectType()\nexport class Comment {\n  @Field((type) => ID)\n  id: string;\n\n  @Field()\n  content: string;\n\n  @Field()\n  postId: string;\n\n  @Field((type) => Post)\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CommentEntity.html":{"url":"entities/CommentEntity.html","title":"entity - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/entity/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                post\n                            \n                            \n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/comment.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at', type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/comment.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(type => PostEntity, p => p.comments)@JoinColumn({name: 'post_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/comment.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(comment => comment.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/comment.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  RelationId,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostEntity } from './post.entity';\nimport { UserEntity } from './user.entity';\n\n@Entity({ name: 'comments' })\nexport class CommentEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  content: string;\n\n  @ManyToOne((type) => PostEntity, (p) => p.comments)\n  @JoinColumn({ name: 'post_id' })\n  post: PostEntity;\n\n  @RelationId((comment: CommentEntity) => comment.post)\n  postId?: string;\n\n  @CreateDateColumn({ name: 'created_at', type: 'timestamp' })\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentInput.html":{"url":"classes/CommentInput.html","title":"class - CommentInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/dto/comment.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsNotEmpty()@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/comment.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/comment.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IsNotEmpty, MinLength } from 'class-validator';\n\n@InputType()\nexport class CommentInput {\n  @Field()\n  postId: string;\n\n  @Field()\n  @IsNotEmpty()\n  @MinLength(10)\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentRepository.html":{"url":"classes/CommentRepository.html","title":"class - CommentRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repository/comment.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByPostId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByPostId\n                        \n                    \n                \n            \n            \n                \nfindByPostId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/repository/comment.repository.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { CommentEntity } from '../entity/comment.entity';\n\n@EntityRepository(CommentEntity)\nexport class CommentRepository extends Repository {\n  //\n  findByPostId(id: string): Promise {\n    return this.createQueryBuilder('comment')\n      .where('comment.post.id=:id')\n      .setParameter('id', id)\n      .getMany();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_providers\n\n\n\n\nPostsDataInitializer\n\nPostsDataInitializer\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDatabaseModule -->\n\nPostsDataInitializer->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsDataInitializer\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostsDataInitializer } from './posts-data-initializer';\nimport { CommentRepository } from './repository/comment.repository';\nimport { PostRepository } from './repository/post.repository';\nimport { UserRepository } from './repository/user.repository';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      PostRepository,\n      UserRepository,\n      CommentRepository,\n    ]),\n  ],\n  exports: [TypeOrmModule],\n  providers: [PostsDataInitializer],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DateScalar.html":{"url":"classes/DateScalar.html","title":"class - DateScalar","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DateScalar\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/scalars/date.scalar.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        CustomScalar\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                parseLiteral\n                            \n                            \n                                parseValue\n                            \n                            \n                                serialize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Date custom scalar type'\n                    \n                \n                    \n                        \n                                Defined in src/gql/scalars/date.scalar.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        parseLiteral\n                        \n                    \n                \n            \n            \n                \nparseLiteral(ast: ValueNode)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/scalars/date.scalar.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ast\n                                    \n                                            ValueNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseValue\n                        \n                    \n                \n            \n            \n                \nparseValue(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/scalars/date.scalar.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(value: Date)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/scalars/date.scalar.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { Kind, ValueNode } from 'graphql';\n\n@Scalar('Date', (type) => Date)\nexport class DateScalar implements CustomScalar {\n  description = 'Date custom scalar type';\n\n  parseValue(value: number): Date {\n    return new Date(value); // value from the client\n  }\n\n  serialize(value: Date): number {\n    return value.getTime(); // value sent to the client\n  }\n\n  parseLiteral(ast: ValueNode): Date {\n    if (ast.kind === Kind.INT) {\n      return new Date(ast.value);\n    }\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GqlApiModule.html":{"url":"modules/GqlApiModule.html","title":"module - GqlApiModule","body":"\n                   \n\n\n\n\n    Modules\n    GqlApiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GqlApiModule\n\n\n\ncluster_GqlApiModule_imports\n\n\n\ncluster_GqlApiModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nGqlApiModule\n\nGqlApiModule\n\nGqlApiModule -->\n\nDatabaseModule->GqlApiModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nGqlApiModule -->\n\nPostsLoaders->GqlApiModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nGqlApiModule -->\n\nPostsService->GqlApiModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nGqlApiModule -->\n\nUsersService->GqlApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/gql/gql-api.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsLoaders\n                        \n                        \n                            PostsService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsResolver } from './resolvers/posts.resolver';\nimport { PostsService } from './service/posts.service';\nimport { DatabaseModule } from '../database/database.module';\nimport { PubSub } from 'graphql-subscriptions';\nimport { UsersResolver } from './resolvers/users.resolver';\nimport { UsersService } from './service/users.service';\nimport PostsLoaders from './dataloaders/posts.loaders';\nimport { DateScalar } from './scalars/date.scalar';\nimport { LoggingPlugin } from './plugins/logging.plugin';\n\n@Module({\n  imports: [DatabaseModule],\n  providers: [\n    {\n      provide: PubSub,\n      useValue: new PubSub(),\n    },\n    PostsResolver,\n    UsersResolver,\n    UsersService,\n    PostsService,\n    PostsLoaders,\n   // DateScalar, LoggingPlugin\n  ],\n  exports: [],\n})\nexport class GqlApiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/HasPermissionsGuard.html":{"url":"guards/HasPermissionsGuard.html","title":"guard - HasPermissionsGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    HasPermissionsGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authz/has-permissions.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/authz/has-permissions.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authz/has-permissions.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { Observable } from 'rxjs';\nimport { AuthenticatedRequest } from './authenticated-request.interface';\nimport { HAS_PERMISSIONS_KEY } from './authz.constants';\nimport { PermissionType } from './permission-type.enum';\n\n@Injectable()\nexport class HasPermissionsGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const routePermissions = this.reflector.get(\n      HAS_PERMISSIONS_KEY,\n      context.getHandler(),\n    );\n    if (!routePermissions || routePermissions.length == 0) {\n      return true;\n    }\n    console.log('route requires permissions:', routePermissions);\n    const { user } = GqlExecutionContext.create(context).getContext()\n      .req as AuthenticatedRequest;\n    const { permissions } = user;\n    console.log('has permissions:', permissions);\n    return permissions && permissions.some((r) => routePermissions.includes(r));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/filters/http.exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        GqlExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/filters/http.exception.filter.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     HttpException\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, HttpException } from '@nestjs/common';\nimport { GqlArgumentsHost, GqlExceptionFilter } from '@nestjs/graphql';\nimport { ApolloError } from 'apollo-server-errors';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements GqlExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const gqlHost = GqlArgumentsHost.create(host);\n    //console.log('gqlHost:', gqlHost);\n    return exception;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authz/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authz/jwt-auth.guard.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n            \n                \n                    Defined in src/authz/jwt-auth.guard.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    info\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    // Add your custom authentication logic here\n    // for example, call super.logIn(request) to establish a session.\n    //return super.canActivate(context);\n    const ctx = GqlExecutionContext.create(context);\n    const { req } = ctx.getContext();\n    return super.canActivate(new ExecutionContextHost([req]));\n  }\n\n  handleRequest(err, user, info) {\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authz/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            permissions\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permissions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permissions:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  sub: string;\n  email?: string;\n  name?: string;\n  permissions?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authz/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/authz/jwt.strategy.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authz/jwt.strategy.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         UserPrincipal\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { passportJwtSecret } from 'jwks-rsa';\nimport { Inject } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport auth0Config from '../config/auth0.config';\nimport { JwtPayload } from './jwt-payload.interface';\nimport { UserPrincipal } from './user-principal.interface';\nimport { PermissionType } from './permission-type.enum';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(@Inject(auth0Config.KEY) config: ConfigType) {\n    super({\n      secretOrKeyProvider: passportJwtSecret({\n        cache: true,\n        rateLimit: true,\n        jwksRequestsPerMinute: 5,\n        jwksUri: `${config.issuerUri}.well-known/jwks.json`,\n      }),\n\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      audience: config.audience,\n      issuer: config.issuerUri,\n      algorithms: ['RS256'],\n    });\n  }\n\n  validate(payload: JwtPayload): UserPrincipal {\n    console.log('jwt payload:', JSON.stringify(payload));\n    return {\n      userId: payload.sub,\n      email: payload.email,\n      name: payload.name,\n      permissions: payload.permissions.map((p) => p),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggingPlugin.html":{"url":"classes/LoggingPlugin.html","title":"class - LoggingPlugin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggingPlugin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/plugins/logging.plugin.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ApolloServerPlugin\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                requestDidStart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestDidStart\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestDidStart()\n                \n            \n\n\n            \n                \n                    Defined in src/gql/plugins/logging.plugin.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Plugin } from '@nestjs/graphql';\nimport {\n  ApolloServerPlugin,\n  GraphQLRequestListener,\n} from 'apollo-server-plugin-base';\n\n@Plugin()\nexport class LoggingPlugin implements ApolloServerPlugin {\n  async requestDidStart(): Promise {\n    console.log('Request started');\n    return {\n      async willSendResponse() {\n        console.log('Will send response');\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/types/post.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                author\n                            \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                comments\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => User, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => , {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Directive('@upper')@Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/post.model.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Directive, Field, ID, ObjectType } from '@nestjs/graphql';\nimport { User } from './user.model';\nimport { Comment } from './comment.model';\n\n// @ObjectType()\n// @Directive('@key(fields: \"id\")')\n// export class Post {\n//   @Field((type) => ID)\n//   id: number;\n\n//   @Field()\n//   title: string;\n\n//   @Field((type) => Int)\n//   authorId: number;\n\n//   @Field((type) => User)\n//   user?: User;\n// }\n\n@ObjectType()\nexport class Post {\n  @Field((type) => ID)\n  id?: string;\n\n  @Directive('@upper')\n  @Field()\n  title: string;\n\n  @Field({ nullable: true })\n  content?: string;\n\n  @Field({ nullable: true })\n  createdAt?: Date;\n\n  @Field({ nullable: true })\n  updatedAt?: Date;\n\n  @Field((type) => [Comment], { nullable: true })\n  comments?: Comment[];\n\n  @Field((type) => User, { nullable: true })\n  author?: User;\n\n  @Field({ nullable: true })\n  authorId?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostEntity.html":{"url":"entities/PostEntity.html","title":"entity - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                author\n                            \n                            \n                                    Optional\n                                authorId\n                            \n                            \n                                    Optional\n                                comments\n                            \n                            \n                                    Optional\n                                content\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(type => UserEntity, {nullable: true})@JoinColumn({name: 'author_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @RelationId(post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(type => CommentEntity, comment => comment.post, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at', type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at', type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  RelationId,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { CommentEntity } from './comment.entity';\nimport { UserEntity } from './user.entity';\n\n@Entity({ name: 'posts' })\nexport class PostEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id?: string;\n\n  @Column()\n  title: string;\n\n  @Column({ nullable: true })\n  content?: string;\n\n  @OneToMany((type) => CommentEntity, (comment) => comment.post, {\n    cascade: true,\n  })\n  comments?: Promise;\n\n  @ManyToOne((type) => UserEntity, { nullable: true })\n  @JoinColumn({ name: 'author_id' })\n  author?: UserEntity;\n\n  @RelationId((post: PostEntity) => post.author)\n  authorId?: string;\n\n  @CreateDateColumn({ name: 'created_at', type: 'timestamp', nullable: true })\n  createdAt?: Date;\n\n  @UpdateDateColumn({ name: 'updated_at', type: 'timestamp', nullable: true })\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostInput.html":{"url":"classes/PostInput.html","title":"class - PostInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/dto/post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsNotEmpty()@MinLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/post.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/post.input.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/post.input.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IsNotEmpty, MinLength } from 'class-validator';\n\n@InputType()\nexport class PostInput {\n  @Field({ nullable: true })\n  id?: string;\n\n  @Field()\n  @IsNotEmpty()\n  title: string;\n\n  @Field()\n  @IsNotEmpty()\n  @MinLength(10)\n  content: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundError.html":{"url":"classes/PostNotFoundError.html","title":"class - PostNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/resolvers/post-not-found.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ApolloError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string)\n                    \n                \n                        \n                            \n                                Defined in src/gql/resolvers/post-not-found.error.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/gql/resolvers/post-not-found.error.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApolloError } from 'apollo-server-errors';\nexport class PostNotFoundError extends ApolloError {\n  postId: string;\n  constructor(id: string) {\n    super('Post:' + id + ' was not found', 'POST_NOT_FOUND');\n    this.postId = id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostRepository.html":{"url":"classes/PostRepository.html","title":"class - PostRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repository/post.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findAll\n                            \n                            \n                                findByAuthor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(q: string, offset: number, limit: number)\n                \n            \n\n\n            \n                \n                    Defined in src/database/repository/post.repository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    q\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \nfindByAuthor(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/repository/post.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { PostEntity } from '../entity/post.entity';\n\n@EntityRepository(PostEntity)\nexport class PostRepository extends Repository {\n  findAll(q: string, offset: number, limit: number): Promise {\n    return this.createQueryBuilder('p')\n      .where('p.title like :q or p.content like :q')\n      .setParameter('q', '%' + q + '%')\n      .skip(offset)\n      .take(limit)\n      .getMany();\n  }\n\n  findByAuthor(id: string): Promise {\n    return this.manager.find(PostEntity, { author: { id: id } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsArgs.html":{"url":"classes/PostsArgs.html","title":"class - PostsArgs","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsArgs\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/dto/posts.arg.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keyword\n                            \n                            \n                                skip\n                            \n                            \n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keyword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => String)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/posts.arg.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/posts.arg.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 25\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => Int)@Min(1)@Max(50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/dto/posts.arg.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArgsType, Field, Int } from '@nestjs/graphql';\nimport { Max, Min } from 'class-validator';\n\n@ArgsType()\nexport class PostsArgs {\n  @Field((type) => String)\n  keyword = '';\n\n  @Field((type) => Int)\n  @Min(0)\n  skip = 0;\n\n  @Field((type) => Int)\n  @Min(1)\n  @Max(50)\n  take = 25;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsDataInitializer.html":{"url":"injectables/PostsDataInitializer.html","title":"injectable - PostsDataInitializer","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsDataInitializer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/posts-data-initializer.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                data\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: PostRepository, manager: EntityManager)\n                    \n                \n                        \n                            \n                                Defined in src/database/posts-data-initializer.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        PostRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        manager\n                                                  \n                                                        \n                                                                    EntityManager\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/database/posts-data-initializer.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      title: 'Generate a NestJS project',\n      content: 'content',\n    },\n    {\n      title: 'Create GrapQL APIs',\n      content: 'content',\n    },\n    {\n      title: 'Connect to Postgres via TypeORM',\n      content: 'content',\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/database/posts-data-initializer.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { EntityManager } from 'typeorm';\nimport { PostEntity } from './entity/post.entity';\nimport { PostRepository } from './repository/post.repository';\nimport { UserEntity } from './entity/user.entity';\nimport { CommentEntity } from './entity/comment.entity';\n\n@Injectable()\nexport class PostsDataInitializer implements OnModuleInit {\n  private data: any[] = [\n    {\n      title: 'Generate a NestJS project',\n      content: 'content',\n    },\n    {\n      title: 'Create GrapQL APIs',\n      content: 'content',\n    },\n    {\n      title: 'Connect to Postgres via TypeORM',\n      content: 'content',\n    },\n  ];\n\n  constructor(\n    private readonly postRepository: PostRepository,\n    private readonly manager: EntityManager,\n  ) {}\n\n  async onModuleInit(): Promise {\n    await this.manager.transaction(async (mgr) => {\n      // NOTE: you must perform all database operations using the given manager instance\n      // it's a special instance of EntityManager working with this transaction\n      // and don't forget to await things here\n\n      const commentDel = await mgr.delete(CommentEntity, {});\n      console.log('comments deleted: ', commentDel.affected);\n\n      const del = await mgr.delete(PostEntity, {});\n      console.log('posts deleted: ', del.affected);\n\n      const userDel = await mgr.delete(UserEntity, {});\n      console.log('users deleted: ', userDel.affected);\n\n      const user = new UserEntity();\n\n      Object.assign(user, {\n        id: 'test@id',\n        email: 'hantsy@gmail.com',\n        name: 'hantsy',\n      });\n\n      await mgr.save(user);\n      await Promise.all(\n        this.data.map(async (d) => {\n          const p = new PostEntity();\n          Object.assign(p, d);\n          p.author = user;\n\n          const c = new CommentEntity();\n          c.content = 'test comment at:' + new Date();\n          p.comments = Promise.resolve([c]);\n          await mgr.save(p);\n        }),\n      );\n    });\n\n    const post = new PostEntity();\n    post.title = 'test title';\n    post.content = 'test content';\n    const user = new UserEntity();\n    Object.assign(user, {\n      id: 'test@id2',\n      email: 'hantsy2@gmail.com',\n      name: 'hantsy2',\n    });\n    this.manager.save(user);\n    post.author = user;\n    const comment = new CommentEntity();\n    comment.content = 'test comment';\n    post.comments = Promise.resolve([comment]);\n    const saved = await this.postRepository.save(post);\n    console.log('saved from repository: ', JSON.stringify(saved));\n\n    const savedPosts = await this.postRepository.find({\n      relations: ['comments', 'author'],\n    });\n    console.log('saved:', JSON.stringify(savedPosts));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsLoaders.html":{"url":"injectables/PostsLoaders.html","title":"injectable - PostsLoaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsLoaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/dataloaders/posts.loaders.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                loadAuthors\n                            \n                            \n                                    Public\n                                    Readonly\n                                loadComments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postService: PostsService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/gql/dataloaders/posts.loaders.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        loadAuthors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataLoader((authorIds: string[]) => {\n    console.log('dataloaders: ', authorIds);\n    return lastValueFrom(\n      this.usersService.findByIds(authorIds).pipe(\n        map((users) => new Map(users.map((user) => [user.id, user]))),\n        map((usersMap) => {\n          return authorIds.map((authorId) => usersMap.get(authorId));\n        }),\n      ),\n    );\n  })\n                    \n                \n                    \n                        \n                                Defined in src/gql/dataloaders/posts.loaders.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        loadComments\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataLoader((postIds: string[]) => {\n    console.log('dataloaders: ', postIds);\n    return lastValueFrom(\n      this.postService.findCommentsByPostIds(postIds).pipe(\n        map((comments) => {\n          return postIds.map((postId) =>\n            comments.filter((c) => c.postId == postId),\n          );\n        }),\n      ),\n    );\n  })\n                    \n                \n                    \n                        \n                                Defined in src/gql/dataloaders/posts.loaders.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Scope } from '@nestjs/common';\nimport { UsersService } from '../service/users.service';\nimport * as DataLoader from 'dataloader';\nimport { map } from 'rxjs/operators';\nimport { lastValueFrom } from 'rxjs';\nimport { PostsService } from '../service/posts.service';\n\n@Injectable({ scope: Scope.REQUEST })\nexport default class PostsLoaders {\n  constructor(\n    private postService: PostsService,\n    private usersService: UsersService,\n  ) {}\n\n  public readonly loadAuthors = new DataLoader((authorIds: string[]) => {\n    console.log('dataloaders: ', authorIds);\n    return lastValueFrom(\n      this.usersService.findByIds(authorIds).pipe(\n        map((users) => new Map(users.map((user) => [user.id, user]))),\n        map((usersMap) => {\n          return authorIds.map((authorId) => usersMap.get(authorId));\n        }),\n      ),\n    );\n  });\n\n  public readonly loadComments = new DataLoader((postIds: string[]) => {\n    console.log('dataloaders: ', postIds);\n    return lastValueFrom(\n      this.postService.findCommentsByPostIds(postIds).pipe(\n        map((comments) => {\n          return postIds.map((postId) =>\n            comments.filter((c) => c.postId == postId),\n          );\n        }),\n      ),\n    );\n  });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/resolvers/posts.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                addCommentHandler\n                            \n                            \n                                    Async\n                                comments\n                            \n                            \n                                createPost\n                            \n                            \n                                getAllPosts\n                            \n                            \n                                    Async\n                                getAuthor\n                            \n                            \n                                getPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService, postsLoaders: PostsLoaders, pubSub: PubSub)\n                    \n                \n                        \n                            \n                                Defined in src/gql/resolvers/posts.resolver.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsLoaders\n                                                  \n                                                        \n                                                                        PostsLoaders\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        pubSub\n                                                  \n                                                        \n                                                                    PubSub\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(commentInput: CommentInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Comment)@UseGuards(JwtAuthGuard, HasPermissionsGuard)@HasPermissions(PermissionType.WRITE_POSTS)\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentInput\n                                    \n                                                CommentInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCommentHandler\n                        \n                    \n                \n            \n            \n                \naddCommentHandler()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Subscription(returns => Comment, {name: 'commentAdded'})\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        comments\n                        \n                    \n                \n            \n            \n                \n                    \n                    comments(post: Post)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(of => )\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(user: UserPrincipal, data: PostInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => Post)@UseGuards(JwtAuthGuard, HasPermissionsGuard)@HasPermissions(PermissionType.WRITE_POSTS)\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserPrincipal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \ngetAllPosts(postsArg: PostsArgs)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => )\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postsArg\n                                    \n                                                PostsArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthor\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthor(post: Post)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField('author', of => User)\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(returns => Post)\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/posts.resolver.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ParseUUIDPipe, UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n  Subscription,\n} from '@nestjs/graphql';\nimport { PubSub } from 'graphql-subscriptions';\nimport { Observable } from 'rxjs';\nimport { tap, throwIfEmpty } from 'rxjs/operators';\nimport { GqlUser } from '../../authz/gql-user.decorator';\nimport { HasPermissions } from '../../authz/has-permissions.decorator';\nimport { HasPermissionsGuard } from '../../authz/has-permissions.guard';\nimport { JwtAuthGuard } from '../../authz/jwt-auth.guard';\nimport { PermissionType } from '../../authz/permission-type.enum';\nimport { UserPrincipal } from '../../authz/user-principal.interface';\nimport { CommentInput } from '../dto/comment.input';\nimport { PostInput } from '../dto/post.input';\nimport { PostsArgs } from '../dto/posts.arg';\nimport { Comment } from '../types/comment.model';\nimport { Post } from '../types/post.model';\nimport PostsLoaders from '../dataloaders/posts.loaders';\nimport { PostsService } from '../service/posts.service';\nimport { PostNotFoundError } from './post-not-found.error';\nimport { User } from '../types/user.model';\n\n@Resolver((of) => Post)\nexport class PostsResolver {\n  constructor(\n    private readonly postsService: PostsService,\n    private readonly postsLoaders: PostsLoaders,\n    private readonly pubSub: PubSub,\n  ) {}\n\n  // @Query(() => [Post])\n  // async posts(\n  //   @Info() info: GraphQLResolveInfo\n  // ) {\n  //   const parsedInfo = parseResolveInfo(info) as ResolveTree;\n  //   const simplifiedInfo = simplifyParsedResolveInfoFragmentWithType(\n  //     parsedInfo,\n  //     info.returnType\n  //   );\n\n  //   const posts = 'author' in simplifiedInfo.fields\n  //     ? await this.postsService.getPostsWithAuthors()\n  //     : await this.postsService.getPosts();\n\n  //   return posts.items;\n  // }\n\n  @Query((returns) => Post)\n  getPostById(@Args('postId', ParseUUIDPipe) id: string): Observable {\n    return this.postsService\n      .findById(id)\n      .pipe(throwIfEmpty(() => new PostNotFoundError(id)));\n  }\n\n  @Query((returns) => [Post])\n  getAllPosts(@Args() postsArg: PostsArgs): Observable {\n    return this.postsService.findAll(postsArg);\n  }\n\n  @ResolveField('author', (of) => User)\n  async getAuthor(@Parent() post: Post): Promise {\n    const { authorId } = post;\n    console.log('resovle author field:', authorId);\n    return await this.postsLoaders.loadAuthors.load(authorId);\n  }\n\n  // @ResolveField((of) => [Comment])\n  // public comments(@Parent() post: Post): Observable {\n  //   return this.postsService.findCommentsOfPost(post.id);\n  // }\n\n  @ResolveField((of) => [Comment])\n  async comments(@Parent() post: Post): Promise {\n    return await this.postsLoaders.loadComments.load(post.id);\n  }\n\n  @Mutation((returns) => Post)\n  @UseGuards(JwtAuthGuard, HasPermissionsGuard)\n  @HasPermissions(PermissionType.WRITE_POSTS)\n  createPost(\n    @GqlUser() user: UserPrincipal,\n    @Args('createPostInput') data: PostInput,\n  ): Observable {\n    return this.postsService.createPost(user.userId, data);\n  }\n\n  @Mutation((returns) => Comment)\n  @UseGuards(JwtAuthGuard, HasPermissionsGuard)\n  @HasPermissions(PermissionType.WRITE_POSTS)\n  addComment(\n    @Args('commentInput', ParseUUIDPipe) commentInput: CommentInput,\n  ): Observable {\n    return this.postsService\n      .addComment(commentInput.postId, commentInput.content)\n      .pipe(\n        tap((c) => this.pubSub.publish('commentAdded', { commentAdded: c })),\n      );\n  }\n\n  @Subscription((returns) => Comment, { name: 'commentAdded' })\n  addCommentHandler() {\n    return this.pubSub.asyncIterator('commentAdded');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/service/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addComment\n                            \n                            \n                                createPost\n                            \n                            \n                                findAll\n                            \n                            \n                                findByAuthor\n                            \n                            \n                                findById\n                            \n                            \n                                findCommentsByPostId\n                            \n                            \n                                findCommentsByPostIds\n                            \n                            \n                                    Private\n                                mapAsModel\n                            \n                            \n                                    Private\n                                mapAsModelArray\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postRepository: PostRepository, commentRepository: CommentRepository)\n                    \n                \n                        \n                            \n                                Defined in src/gql/service/posts.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        PostRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commentRepository\n                                                  \n                                                        \n                                                                        CommentRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addComment\n                        \n                    \n                \n            \n            \n                \naddComment(id: string, comment: string)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    comment\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createPost\n                        \n                    \n                \n            \n            \n                \ncreatePost(authorId: string, data: PostInput)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                PostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(args: PostsArgs)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                                PostsArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByAuthor\n                        \n                    \n                \n            \n            \n                \nfindByAuthor(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCommentsByPostId\n                        \n                    \n                \n            \n            \n                \nfindCommentsByPostId(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findCommentsByPostIds\n                        \n                    \n                \n            \n            \n                \nfindCommentsByPostIds(ids: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mapAsModel\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapAsModel(e: PostEntity)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    e\n                                    \n                                                PostEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        mapAsModelArray\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapAsModelArray(entities: PostEntity[])\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/posts.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entities\n                                    \n                                                PostEntity[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Post[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { EMPTY, from, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { In } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\n\nimport { PostEntity } from '../../database/entity/post.entity';\nimport { CommentRepository } from '../../database/repository/comment.repository';\nimport { PostRepository } from '../../database/repository/post.repository';\nimport { PostInput } from '../dto/post.input';\nimport { PostsArgs } from '../dto/posts.arg';\nimport { Comment } from '../types/comment.model';\nimport { Post } from '../types/post.model';\nimport { CommentEntity } from '../../database/entity/comment.entity';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    private readonly postRepository: PostRepository,\n    private readonly commentRepository: CommentRepository,\n  ) {}\n\n  findById(id: string): Observable {\n    return from(this.postRepository.findOne(id)).pipe(\n      switchMap((p) => (p ? of(p) : EMPTY)),\n      map((e, idx) => this.mapAsModel(e)),\n    );\n  }\n\n  findAll(args: PostsArgs): Observable {\n    return from(\n      this.postRepository.findAll(args.keyword, args.skip, args.take),\n    ).pipe(\n      //tap((e) => console.log('tap:', JSON.stringify(e))),\n      map((entities, idx) => this.mapAsModelArray(entities)),\n      // tap((e) => console.log(e)),\n    );\n  }\n\n  createPost(authorId: string, data: PostInput): Observable {\n    return from(\n      this.postRepository.save({\n        id: data.id,\n        title: data.title,\n        content: data.content,\n        author: {\n          id: authorId,\n        },\n      }),\n    ).pipe(map((e, idx) => this.mapAsModel(e)));\n  }\n\n  findByAuthor(id: string): Observable {\n    return from(this.postRepository.findByAuthor(id)).pipe(\n      map((e, idx) => this.mapAsModelArray(e)),\n    );\n  }\n\n  findCommentsByPostId(id: string): Observable {\n    return from(this.commentRepository.findByPostId(id)).pipe(\n      map((e, idx) =>\n        e.map((c) => {\n          return { id: c.id, content: c.content } as Comment;\n        }),\n      ),\n    );\n  }\n\n  findCommentsByPostIds(ids: string[]): Observable {\n    return from(\n      this.commentRepository.find({\n        where: { postId: In(ids) },\n      }),\n    ).pipe(\n      map((e, idx) =>\n        e.map((c) => {\n          return { id: c.id, postId: c.postId,  content: c.content } as Comment;\n        }),\n      ),\n    );\n  }\n\n  addComment(id: string, comment: string): Observable {\n    const entity = new CommentEntity();\n    Object.assign(entity, {\n      content: comment,\n      postId: id,\n    });\n    return from(this.commentRepository.save(entity)).pipe(\n      map((c) => {\n        return { id: c.id, content: c.content } as Comment;\n      }),\n    );\n  }\n\n  private mapAsModel(e: PostEntity): Post {\n    return {\n      id: e.id,\n      title: e.title,\n      content: e.content,\n      createdAt: e.createdAt,\n      updatedAt: e.updatedAt,\n      authorId: e.authorId,\n    };\n  }\n\n  private mapAsModelArray(entities: PostEntity[]): Post[] {\n    return entities.map((e) => {\n      return {\n        id: e.id,\n        title: e.title,\n        content: e.content,\n        createdAt: e.createdAt,\n        updatedAt: e.updatedAt,\n        authorId: e.authorId,\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserResult.html":{"url":"classes/UpdateUserResult.html","title":"class - UpdateUserResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/types/update-result.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                message\n                            \n                            \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/update-result.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/update-result.model.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class UpdateUserResult {\n  @Field()\n  success: boolean;\n\n  @Field()\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpperCaseDirective.html":{"url":"classes/UpperCaseDirective.html","title":"class - UpperCaseDirective","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpperCaseDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/directives/upper-case.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    SchemaDirectiveVisitor\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                visitFieldDefinition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        visitFieldDefinition\n                        \n                    \n                \n            \n            \n                \nvisitFieldDefinition(field: GraphQLField)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/directives/upper-case.directive.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    field\n                                    \n                                            GraphQLField\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { SchemaDirectiveVisitor } from '@graphql-tools/utils';\nimport { defaultFieldResolver, GraphQLField } from 'graphql';\n\nexport class UpperCaseDirective extends SchemaDirectiveVisitor {\n  visitFieldDefinition(field: GraphQLField) {\n    const { resolve = defaultFieldResolver } = field;\n    field.resolve = async function(...args) {\n      const result = await resolve.apply(this, args);\n      if (typeof result === 'string') {\n        return result.toUpperCase();\n      }\n      return result;\n    };\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/types/user.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/user.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => ID)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/user.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/user.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(type => , {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/gql/types/user.model.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ID, ObjectType } from '@nestjs/graphql';\nimport { Post } from './post.model';\n\n@ObjectType()\nexport class User {\n  @Field((type) => ID)\n  id?: string;\n\n  @Field({ nullable: true })\n  name?: string;\n\n  @Field({ nullable: true })\n  email?: string;\n\n  @Field((type) => [Post], { nullable: true })\n  posts?: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/UserEntity.html":{"url":"entities/UserEntity.html","title":"entity - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                email\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, unique: true, default: 'admin@example.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('varchar', {name: 'id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/database/entity/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from 'typeorm';\n\n@Entity({ name: 'users' })\nexport class UserEntity {\n  @PrimaryColumn('varchar', {\n    name: 'id',\n  })\n  id: string;\n\n  @Column({ nullable: true, unique: true, default: 'admin@example.com' })\n  email?: string;\n\n  @Column({ nullable: true, default: 'admin' })\n  name?: string;\n\n  // @OneToMany((type) => PostEntity, (post) => post.author, {\n  //   cascade: false,\n  // })\n  // posts?: Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserNotFoundError.html":{"url":"classes/UserNotFoundError.html","title":"class - UserNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/resolvers/user-not-found.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ApolloError\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string)\n                    \n                \n                        \n                            \n                                Defined in src/gql/resolvers/user-not-found.error.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/gql/resolvers/user-not-found.error.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApolloError } from 'apollo-server-errors';\nexport class UserNotFoundError extends ApolloError {\n  postId: string;\n  constructor(id: string) {\n    super('User:' + id + ' was not found', 'POST_NOT_FOUND');\n    this.postId = id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserPrincipal.html":{"url":"interfaces/UserPrincipal.html","title":"interface - UserPrincipal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserPrincipal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authz/user-principal.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            permissions\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        permissions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        permissions:         PermissionType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PermissionType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { PermissionType } from './permission-type.enum';\nexport interface UserPrincipal {\n  userId: string;\n  email?: string;\n  name?: string;\n  permissions?: PermissionType[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repository/user.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/database/repository/user.repository.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm';\nimport { UserEntity } from '../entity/user.entity';\n\n@EntityRepository(UserEntity)\nexport class UserRepository extends Repository {\n  findByEmail(email: string): Promise {\n    return this.findOne({ email: email });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersResolver.html":{"url":"classes/UsersResolver.html","title":"class - UsersResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/resolvers/users.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getUserById\n                            \n                            \n                                    Public\n                                posts\n                            \n                            \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/gql/resolvers/users.resolver.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getUserById\n                        \n                    \n                \n            \n            \n                \ngetUserById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Directive('@deprecated(reason: \"This query will be removed in the next version\")')@Query(returns => User, {name: 'author'})\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/users.resolver.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        posts\n                        \n                    \n                \n            \n            \n                \n                    \n                    posts(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField(of => )\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/users.resolver.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUser\n                        \n                    \n                \n            \n            \n                \nupdateUser(user: UserPrincipal)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(returns => UpdateUserResult)@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/gql/resolvers/users.resolver.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserPrincipal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Directive,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { Observable } from 'rxjs';\nimport { map, throwIfEmpty } from 'rxjs/operators';\nimport { GqlUser } from '../../authz/gql-user.decorator';\nimport { JwtAuthGuard } from '../../authz/jwt-auth.guard';\nimport { UserPrincipal } from '../../authz/user-principal.interface';\nimport { Post } from '../../gql/types/post.model';\nimport { User } from '../../gql/types/user.model';\nimport { UpdateUserResult } from '../types/update-result.model';\nimport { PostsService } from '../service/posts.service';\nimport { UsersService } from '../service/users.service';\nimport { UserNotFoundError } from './user-not-found.error';\n\n@Resolver((of) => User)\nexport class UsersResolver {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly postsService: PostsService,\n  ) {}\n\n  @Directive(\n    '@deprecated(reason: \"This query will be removed in the next version\")',\n  )\n  @Query((returns) => User, { name: 'author' })\n  getUserById(@Args('userId') id: string): Observable {\n    return this.usersService\n      .findById(id)\n      .pipe(throwIfEmpty(() => new UserNotFoundError(id)));\n  }\n\n  @ResolveField((of) => [Post])\n  public posts(@Parent() user: User): Observable {\n    return this.postsService.findByAuthor(user.id);\n  }\n\n  @Mutation((returns) => UpdateUserResult)\n  @UseGuards(JwtAuthGuard)\n  updateUser(@GqlUser() user: UserPrincipal): Observable {\n    console.log('gql user:', user);\n    const { userId, email, name } = user;\n    return this.usersService.update({ id: userId, email, name }).pipe(\n      map((b) => ({\n        success: b,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gql/service/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findById\n                            \n                            \n                                findByIds\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/gql/service/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByIds\n                        \n                    \n                \n            \n            \n                \nfindByIds(ids: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(user: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/gql/service/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { EMPTY, from, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { In, InsertResult } from 'typeorm';\n\nimport { Injectable } from '@nestjs/common';\n\nimport { UserEntity } from '../../database/entity/user.entity';\nimport { UserRepository } from '../../database/repository/user.repository';\nimport { User } from '../types/user.model';\n\n@Injectable()\nexport class UsersService {\n  constructor(private readonly userRepository: UserRepository) {}\n\n  update(user: {\n    id: string;\n    email: string;\n    name: string;\n  }): Observable {\n    //const updateStr = [\"name\"].map(key => `\"${key}\" = EXCLUDED.\"${key}\"`).join(\",\");\n    //.onConflict(`(\"email\") DO UPDATE SET ${updateStr}`)\n\n    const result: Promise = this.userRepository\n      .createQueryBuilder()\n      .insert()\n      .into(UserEntity)\n      .values(user)\n      //.onConflict(`(\"email\") DO NOTHING`)\n      .orUpdate(['name'], ['email'])\n      .execute();\n\n    return from(result).pipe(\n      tap((r) => console.log(r)),\n      map((r) => r.raw != undefined),\n    );\n  }\n\n  findById(id: string): Observable {\n    return from(this.userRepository.findOne(id)).pipe(\n      switchMap((u) => (u ? of(u) : EMPTY)),\n      map((e, idx) => {\n        return {\n          id: e.id,\n          name: e.name,\n          email: e.email,\n        } as User;\n      }),\n    );\n  }\n\n  findByIds(ids: string[]): Observable {\n    return from(\n      this.userRepository.find({\n        where: { id: In(ids) },\n      }),\n    ).pipe(\n      map((ua) => {\n        return ua.map((u) => {\n          const { id, email, name } = u;\n          return { id, email, name } as User;\n        });\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authz/authenticated-request.interface.ts\n            \n            interface\n            AuthenticatedRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authz/authz.constants.ts\n            \n            variable\n            HAS_PERMISSIONS_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authz/gql-user.decorator.ts\n            \n            variable\n            GqlUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authz/has-permissions.decorator.ts\n            \n            variable\n            HasPermissions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authz/has-permissions.guard.ts\n            \n            guard\n            HasPermissionsGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authz/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authz/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authz/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authz/user-principal.interface.ts\n            \n            interface\n            UserPrincipal\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/entity/comment.entity.ts\n            \n            entity\n            CommentEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/entity/post.entity.ts\n            \n            entity\n            PostEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/entity/user.entity.ts\n            \n            entity\n            UserEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/posts-data-initializer.ts\n            \n            injectable\n            PostsDataInitializer\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/repository/comment.repository.ts\n            \n            class\n            CommentRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/database/repository/post.repository.ts\n            \n            class\n            PostRepository\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/database/repository/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gql/dataloaders/posts.loaders.ts\n            \n            injectable\n            PostsLoaders\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/gql/directives/upper-case.directive.ts\n            \n            class\n            UpperCaseDirective\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gql/dto/comment.input.ts\n            \n            class\n            CommentInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gql/dto/post.input.ts\n            \n            class\n            PostInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/gql/dto/posts.arg.ts\n            \n            class\n            PostsArgs\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/gql/filters/http.exception.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gql/plugins/logging.plugin.ts\n            \n            class\n            LoggingPlugin\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/gql/resolvers/post-not-found.error.ts\n            \n            class\n            PostNotFoundError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gql/resolvers/posts.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/gql/resolvers/user-not-found.error.ts\n            \n            class\n            UserNotFoundError\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gql/resolvers/users.resolver.ts\n            \n            class\n            UsersResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/gql/scalars/date.scalar.ts\n            \n            class\n            DateScalar\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/gql/service/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/gql/service/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/gql/types/comment.model.ts\n            \n            class\n            Comment\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/gql/types/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/gql/types/update-result.model.ts\n            \n            class\n            UpdateUserResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/gql/types/user.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @graphql-tools/utils : ^7.10.0\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/graphql : ^9.0.4\n        \n            @nestjs/passport : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/typeorm : ^8.0.2\n        \n            apollo-server : ~3.5.0\n        \n            apollo-server-express : ~3.5.0\n        \n            apollo-server-plugin-base : ^3.2.0\n        \n            class-transformer : ^0.5.0\n        \n            class-validator : ^0.13.1\n        \n            dataloader : ^2.0.0\n        \n            graphql-subscriptions : ^2.0.0\n        \n            jwks-rsa : ^2.0.4\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            tsuml2 : ^0.7.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PermissionType   (src/.../permission-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authz/permission-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PermissionType\n                    \n                \n                        \n                            \n                                 READ_POSTS\n                            \n                        \n                        \n                            \n                                Value : read:posts\n                            \n                        \n                        \n                            \n                                 WRITE_POSTS\n                            \n                        \n                        \n                            \n                                Value : write:posts\n                            \n                        \n                        \n                            \n                                 DELETE_POSTS\n                            \n                        \n                        \n                            \n                                Value : delete:posts\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNestJS GraphQL Sample\n\n\n\nA NestJS GraphQL sample project, including:\n\nCode first Nestjs/GraphQl development\nTypeORM with Postgres \nPassport/Jwt authentication with auth0.net IDP service\nFully testing codes with Jest, jest-mock-extended, ts-mockito, etc.\nGithub actions for continuous testing, code coverage report, docker image building, etc.\n\nDocs\nBuild\nInstall dependencies\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\n\nNestJS GraphQL chapter\nThe Anatomy of a GraphQL Query\nDeveloping a Secure API with NestJS: Managing Identity\nDeveloping a Secure API with NestJS: Managing Roles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthzModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GqlApiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthzModule\n\n\n\ncluster_AuthzModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_GqlApiModule\n\n\n\ncluster_GqlApiModule_providers\n\n\n\n\nAuthzModule\n\nAuthzModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthzModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nGqlApiModule\n\nGqlApiModule\n\nGqlApiModule -->\n\nDatabaseModule->GqlApiModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nGqlApiModule->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthzModule -->\n\nJwtStrategy->AuthzModule\n\n\n\n\n\nPostsDataInitializer\n\nPostsDataInitializer\n\nDatabaseModule -->\n\nPostsDataInitializer->DatabaseModule\n\n\n\n\n\nPostsLoaders\n\nPostsLoaders\n\nGqlApiModule -->\n\nPostsLoaders->GqlApiModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nGqlApiModule -->\n\nPostsService->GqlApiModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nGqlApiModule -->\n\nUsersService->GqlApiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GqlUser   (src/.../gql-user.decorator.ts)\n                        \n                        \n                            HAS_PERMISSIONS_KEY   (src/.../authz.constants.ts)\n                        \n                        \n                            HasPermissions   (src/.../has-permissions.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authz/gql-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GqlUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const context = GqlExecutionContext.create(ctx).getContext();\n    const { req } = context;\n    return req?.user as UserPrincipal;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/authz/authz.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HAS_PERMISSIONS_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'has-permissions'\n                    \n                \n\n\n        \n    \n\n    src/authz/has-permissions.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        HasPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args: PermissionType[]) =>\n  SetMetadata(HAS_PERMISSIONS_KEY, args)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
